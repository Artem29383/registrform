{"version":3,"sources":["Components/FormToFill/FormRegistration.module.css","Components/FormToFill/Input/Input.jsx","HOOKS/useDispatch.js","Components/FormToFill/Input/InputContainer.jsx","Models/ActionConst.js","Utils/validators.js","Utils/submitHandler.js","HOOKS/useSelector.js","State/Form-Reselect.js","Components/FormToFill/FormRegistration.jsx","Components/CompletedForm/CompletedElement.jsx","Components/CompletedForm/CompletedForm.jsx","App.js","Models/Form-Reducer.js","Utils/getlocalStorage.js","State/Store.js","index.js","Components/CompletedForm/CompletedForm.module.css"],"names":["module","exports","memo","title","typeOfInput","values","setValue","errorMessage","hFor","className","classes","item","htmlFor","classnames","naming","invalid","name","id","field","type","value","onChange","maxLength","useAction","dispatch","useDispatch","useCallback","payload","InputContainer","isFormValidCheck","isFormValid","Math","random","setData","setValues","e","currentTarget","length","test","isValidName","isValidEmail","isValidPassword","isValidDate","isValidPhone","submitHandler","preventDefault","useSelectors","func","params","useSelector","state","getDataFormReselect","createSelector","formData","dataForm","getIsFormValidReselect","getIsAccountReselect","isAccount","getIsAccount","FormRegistration","isAccountCreated","InputContainers","Object","keys","map","inp","index","key","onSubmit","formRegistration","onClick","Name","Email","Password","n","localStorage","setItem","JSON","stringify","submit","complete","disabled","CompletedElement","i","Naming","readOnly","CompletedForm","inputs","completedForm","App","initialState","getItem","console","log","parse","formReducer","action","reducer","combineReducers","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"+GACAA,EAAOC,QAAU,CAAC,iBAAmB,2CAA2C,KAAO,+BAA+B,OAAS,iCAAiC,OAAS,iCAAiC,MAAQ,gCAAgC,aAAe,uCAAuC,QAAU,kCAAkC,SAAW,qC,uMCoChVC,kBAjCD,SAAC,GAOR,IANLC,EAMI,EANJA,MACAC,EAKI,EALJA,YACAC,EAII,EAJJA,OACAC,EAGI,EAHJA,SACAC,EAEI,EAFJA,aACAC,EACI,EADJA,KAGA,OACE,yBAAKC,UAAWC,IAAQC,MACtB,2BACEC,QAASJ,EACTC,UAAWI,IACTH,IAAQI,OACRP,GAAgBG,IAAQK,UAEzBZ,GAEH,2BACEa,KAAMb,EACNc,GAAIT,EACJC,UAAWC,IAAQQ,MACnBC,KAAMf,EACNgB,MAAOf,EACPgB,SAAUf,EACVgB,UAAU,OAEZ,0BAAMb,UAAWC,IAAQH,cAAeA,O,OCrB/BgB,EARG,SAAAJ,GAChB,IAAMK,EAAWC,cACjB,OAAOC,uBAAY,eAACC,EAAD,uDAAW,GAAX,OAAkBH,EAAS,CAACL,OAAMQ,cAAW,CAC9DH,EACAL,KCiDWS,EAlDQ,SAAC,GAMjB,IALLzB,EAKI,EALJA,MACAC,EAII,EAJJA,YACAC,EAGI,EAHJA,OACAwB,EAEI,EAFJA,iBACAC,EACI,EADJA,YAGMtB,EAAI,UAAML,EAAN,YAAe4B,KAAKC,UACxBC,EAAUV,ECfe,qBDkBzBW,EAAYR,uBAAY,SAACS,GAC7B,IAAMf,EAAQe,EAAEC,cAAchB,MAE9B,OADAa,EAAQ,CAACb,EAAOjB,IACRgC,EAAEC,cAAcpB,MACtB,IAAK,QEtBgB,SAACX,EAAQwB,EAAkB1B,GAC/CE,EAAOgC,OAGR,wCAAoBC,KAAKjC,GAEvBwB,EAAiB,CAAC,GAAI1B,IADtB0B,EAAiB,CAAC,gLAAqC1B,IAH3D0B,EAAiB,CAAC,gIAA6B1B,IFqB3CoC,CAAYnB,EAAOS,EAAkB,QACrC,MACF,IAAK,SEfiB,SAACxB,EAAQwB,EAAkB1B,GAChDE,EAAOgC,OAGR,uDAAuDC,KAAKjC,GAE1DwB,EAAiB,CAAC,GAAI1B,IADtB0B,EAAiB,CAAC,kFAAuB1B,IAH7C0B,EAAiB,CAAC,0IAAkC1B,IFchDqC,CAAapB,EAAOS,EAAkB,SACtC,MACF,IAAK,YERoB,SAACxB,EAAQwB,EAAkB1B,GACvDE,EAAOgC,OAAS,EACbR,EAAiB,CAAC,oIAA4B1B,IAC9C0B,EAAiB,CAAC,GAAI1B,IFMpBsC,CAAgBrB,EAAOS,EAAkB,YACzC,MACF,IAAK,iBELgB,SAACxB,EAAQwB,EAAkB1B,GAC/CE,EAAOgC,OAGR,sBAAsBC,KAAKjC,GAEzBwB,EAAiB,CAAC,GAAI1B,IADtB0B,EAAiB,CAAC,4KAAsC1B,IAH5D0B,EAAiB,CAAC,+FAAqB1B,IFInCuC,CAAYtB,EAAOS,EAAkB,iBACrC,MACF,IAAK,gBEEiB,SAACxB,EAAQwB,EAAkB1B,GAClD,kCAAkCmC,KAAKjC,GAEtCwB,EAAiB,CAAC,GAAI1B,IADtB0B,EAAiB,CAAC,+KAAyC1B,IFHzDwC,CAAavB,EAAOS,EAAkB,mBAKzC,CAACI,EAAS9B,EAAO0B,IAIpB,OACE,kBAAC,EAAD,CACE1B,MAAOA,EACPC,YAAaA,EACbC,OAAQA,EACRC,SAAU4B,EACV3B,aAAcuB,EACdtB,KAAMA,KGnDCoC,EAAgB,SAAAT,GAC3BA,EAAEU,kBCEWC,EADM,SAACC,GAAD,IAAOC,EAAP,uDAAgB,GAAhB,OAAuBC,aAAY,SAAAC,GAAK,OAAIH,EAAKG,EAAOF,O,OCKhEG,EAAsBC,YAAe,CAJ9B,SAAAF,GAClB,OAAOA,EAAMG,SAASC,YAGyC,SAAAA,GAAQ,OAAIA,KAMhEC,EAAyBH,YAAe,CAJ9B,SAAAF,GACrB,OAAOA,EAAMG,SAASvB,eAG+C,SAAAA,GAAW,OAAIA,KAMzE0B,EAAuBJ,YAAe,CAJ9B,SAAAF,GACnB,OAAOA,EAAMG,SAASI,aAG2C,SAAAC,GAAY,OAAIA,KC+CpEC,EAvDU,WACvB,IAAML,EAAWR,EAAaK,GAAqB,GAC7CrB,EAAcgB,EAAaS,GAC3B1B,EAAmBN,ELbM,qBKczBqC,EAAmBrC,ELbW,0BKc9BkC,EAAYX,EAAaU,GAoBzBrC,EAAO,CAAC,OAAQ,QAAS,WAAY,OAAQ,QAC7C0C,EAAkBC,OAAOC,KAAKT,GAAUU,KAAI,SAACC,EAAKC,GACtD,OAAO,kBAAC,EAAD,CACLC,IAAOD,EACP/D,MAAO8D,EACP7D,YAAae,EAAK+C,GAClB7D,OAAQiD,EAASW,GACjBpC,iBAAkBA,EAClBC,YAAaA,EAAY,GAAGmC,QAGhC,OACE,0BAAMG,SAAUxB,EAAenC,UAAWC,IAAQ2D,kBAC/CR,EACD,yBAAKpD,UAAWC,IAAQC,MACtB,4BACE2D,QAjCgB,WACtB,IAAMhB,EAASiB,MAAQzC,EAAY,GAAGyC,OAC/BjB,EAASkB,OAAS1C,EAAY,GAAG0C,QACjClB,EAASmB,UAAY3C,EAAY,GAAG2C,WACpCnB,EAAS,kBAAoBxB,EAAY,GAAG,mBAC5CwB,EAAS,iBAAmBxB,EAAY,GAAG,gBAC9C,IAAK,IAAI4C,KAAK5C,EAAY,GACrBwB,EAASoB,IACZ7C,EAAiB,CAAC,mFAAmB6C,SAIzCC,aAAaC,QAAQ,WAAYC,KAAKC,UAAUxB,IAChDM,KAqBInD,UAAWI,IACTH,IAAQqE,OACRtB,GAAa/C,IAAQsE,UAEvBC,SAAUxB,GAETA,EAAY,SAAM,wB,gBC/CdyB,EATU,SAAC,GAAwB,IAAvBC,EAAsB,EAAtBA,EAAGjB,EAAmB,EAAnBA,MAAOkB,EAAY,EAAZA,OACnC,OACE,yBAAM3E,UAAWC,IAAQC,MACvB,0BAAMF,UAAWC,IAAQI,QAASsE,EAAOlB,GAAzC,KACA,2BAAOmB,UAAQ,EAAC5E,UAAWC,IAAQQ,MAAOE,MAAO+D,MCaxCG,EAdO,WACpB,IAAMhC,EAAWR,EAAaK,GAAqB,GAC7CiC,EAAS,CAAC,OAAQ,QAAS,WAAY,gBAAiB,gBAC1DG,EAASzB,OAAOzD,OAAOiD,GAAUU,KAAI,SAACmB,EAAGjB,GAC3C,OAAO,kBAAC,EAAD,CAAkBC,IAAKD,EAAOiB,EAAKA,EAAGjB,MAASA,EAAOkB,OAAQA,OAGxE,OACC,0BAAM3E,UAAWC,IAAQ8E,eACvBD,ICCWE,EAXH,WACV,OACE,yBAAKhF,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,Q,wlBCNN,IAAIiF,EAAe,CACjBpC,SCHIqB,aAAagB,QAAQ,aACvBC,QAAQC,IAAI,GACL,CAAChB,KAAKiB,MAAMnB,aAAagB,QAAQ,eAEnC,CAAC,CACN,KAAQ,GACR,MAAS,GACT,SAAY,GACZ,gBAAiB,GACjB,eAAgB,KDLlB7D,YAAa,CAAC,CACZ,KAAQ,GACR,MAAS,GACT,SAAY,GACZ,gBAAiB,GACjB,eAAgB,KAElB2B,WAAW,GAkCEsC,EA/BK,WAAmC,IAAlC7C,EAAiC,uDAAzBwC,EAAcM,EAAW,uCACpD,OAAQA,EAAO7E,MACb,ITjB6B,oBSkB3B,OAAO,EAAP,GACK+B,EADL,CACYI,SAAUJ,EAAMI,SAASU,KAAI,SAAAU,GACrC,IAAK,IAAIP,KAAOO,EACd,GAAIsB,EAAOrE,QAAQ,KAAOwC,EACxB,OAAO,EAAP,GAAWO,EAAX,eAAeP,EAAM6B,EAAOrE,QAAQ,UAK9C,IT1B6B,oBS2B3B,OAAO,EAAP,GACKuB,EADL,CACYpB,YAAaoB,EAAMpB,YAAYkC,KAAI,SAAAU,GAC3C,IAAK,IAAIP,KAAOO,EACd,GAAIsB,EAAOrE,QAAQ,KAAOwC,EACxB,OAAO,EAAP,GAAWO,EAAX,eAAeP,EAAM6B,EAAOrE,QAAQ,UAM9C,ITpCkC,yBSqChC,OAAO,EAAP,GAAWuB,EAAX,CAAkBO,WAAW,IAC/B,QACE,OAAOP,IEtCP+C,EAAUC,YACd,CACE7C,SAAU0C,IAMCI,EAFDC,YAAYH,GCF1BI,IAASC,OACP,kBAAC,IAAD,CAAUH,MAAOA,GACjB,kBAAC,EAAD,OACaI,SAASC,eAAe,U,kBCTvCxG,EAAOC,QAAU,CAAC,cAAgB,qCAAqC,KAAO,4BAA4B,OAAS,8BAA8B,MAAQ,gC","file":"static/js/main.1b4cfde5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formRegistration\":\"FormRegistration_formRegistration__3Db97\",\"item\":\"FormRegistration_item__3pWOk\",\"naming\":\"FormRegistration_naming__lGP69\",\"submit\":\"FormRegistration_submit__25QBC\",\"field\":\"FormRegistration_field__3mwpj\",\"errorMessage\":\"FormRegistration_errorMessage__Z0ylW\",\"invalid\":\"FormRegistration_invalid__3h1at\",\"complete\":\"FormRegistration_complete__ZETju\"};","import React, { memo }  from 'react';\r\nimport classes from '../FormRegistration.module.css';\r\nimport classnames from 'classnames';\r\n\r\nconst Input = ({\r\n  title,\r\n  typeOfInput,\r\n  values,\r\n  setValue,\r\n  errorMessage,\r\n  hFor\r\n}) => {\r\n  \r\n  return (\r\n    <div className={classes.item}>\r\n      <label\r\n        htmlFor={hFor}\r\n        className={classnames(\r\n          classes.naming,\r\n          errorMessage && classes.invalid\r\n        )}>\r\n        {title}\r\n      </label>\r\n      <input\r\n        name={title}\r\n        id={hFor}\r\n        className={classes.field}\r\n        type={typeOfInput}\r\n        value={values}\r\n        onChange={setValue}\r\n        maxLength='40'\r\n      />\r\n      <span className={classes.errorMessage}>{errorMessage}</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default memo(Input);","import { useCallback } from 'react';\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nconst useAction = type => {\r\n  const dispatch = useDispatch();\r\n  return useCallback((payload = {}) => dispatch({type, payload}), [\r\n    dispatch,\r\n    type\r\n  ]);\r\n};\r\n\r\nexport default useAction;\r\n\r\n","import React, { useCallback } from 'react';\r\nimport Input from './Input';\r\nimport {isValidDate, isValidEmail, isValidName, isValidPassword, isValidPhone} from '../../../Utils/validators';\r\nimport useAction from \"../../../HOOKS/useDispatch\";\r\nimport {SET_DATAFORM_NAME} from \"../../../Models/ActionConst\";\r\n\r\nconst InputContainer = ({\r\n  title,\r\n  typeOfInput,\r\n  values,\r\n  isFormValidCheck,\r\n  isFormValid\r\n}) => {\r\n  \r\n  const hFor = `${title}-${Math.random()}`;\r\n  const setData = useAction(SET_DATAFORM_NAME);\r\n  \r\n  \r\n  const setValues = useCallback((e) => {\r\n    const value = e.currentTarget.value;\r\n    setData([value, title]);\r\n    switch (e.currentTarget.name) {\r\n      case 'Name':\r\n        isValidName(value, isFormValidCheck, 'Name');\r\n        break;\r\n      case 'Email':\r\n        isValidEmail(value, isFormValidCheck, 'Email');\r\n        break;\r\n      case 'Password':\r\n        isValidPassword(value, isFormValidCheck, 'Password');\r\n        break;\r\n      case 'Date of Birth':\r\n        isValidDate(value, isFormValidCheck, 'Date of Birth');\r\n        break;\r\n      case 'Phone number':\r\n        isValidPhone(value, isFormValidCheck, 'Phone number');\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }, [setData, title, isFormValidCheck]);\r\n  \r\n\r\n  \r\n  return (\r\n    <Input\r\n      title={title}\r\n      typeOfInput={typeOfInput}\r\n      values={values}\r\n      setValue={setValues}\r\n      errorMessage={isFormValid}\r\n      hFor={hFor}\r\n    />\r\n  );\r\n};\r\n\r\nexport default InputContainer;","export const SET_DATAFORM_NAME = 'SET_DATAFORM_NAME';\r\nexport const SET_IS_FORM_VALID = 'SET_IS_FORM_VALID';\r\nexport const SET_IS_ACCOUNT_CREATED = 'SET_IS_ACCOUNT_CREATED';","export const isValidName = (values, isFormValidCheck, title) => {\r\n  if (!values.length) {\r\n    isFormValidCheck(['Имя не может быть пустым.', title]);\r\n  } else {\r\n    (!/^[a-zA-Zа-яА-Я]+$/.test(values))\r\n      ? isFormValidCheck(['Имя может содержать только буквы.', title])\r\n      : isFormValidCheck(['', title]);\r\n  }\r\n};\r\n\r\nexport const isValidEmail = (values, isFormValidCheck, title) => {\r\n  if (!values.length) {\r\n    isFormValidCheck(['Email обязателен к заполнению.', title]);\r\n  } else {\r\n    (!/^([A-Za-z0-9_\\-.])+@([A-Za-z0-9])+\\.([A-Za-z]{2,4})$/.test(values))\r\n      ? isFormValidCheck(['Некорректный Email.', title])\r\n      : isFormValidCheck(['', title]);\r\n  }\r\n};\r\n\r\nexport const isValidPassword = (values, isFormValidCheck, title) => {\r\n  (values.length < 6)\r\n    ? isFormValidCheck(['Пароль слишком короткий.', title])\r\n    : isFormValidCheck(['', title]);\r\n};\r\n\r\nexport const isValidDate = (values, isFormValidCheck, title) => {\r\n  if (!values.length) {\r\n    isFormValidCheck(['Дата обязательна.', title]);\r\n  } else {\r\n    (!/^\\d\\d.\\d\\d.[\\d]{4}$/.test(values))\r\n      ? isFormValidCheck(['Введите дату в формате ДД-ММ-ГГГГ.', title])\r\n      : isFormValidCheck(['', title]);\r\n  }\r\n};\r\n\r\nexport const isValidPhone = (values, isFormValidCheck, title) => {\r\n  ((!/(^\\+7[0-9]{10}$)|(^8[0-9]{10}$)/.test(values)))\r\n    ? isFormValidCheck(['Номер телефона начинается с +7 или 8.', title])\r\n    : isFormValidCheck(['', title]);\r\n};","export const submitHandler = e => {\r\n  e.preventDefault();\r\n};","import {useSelector} from \"react-redux\";\r\n\r\nconst useSelectors = (func, params = {}) => useSelector(state => func(state, params));\r\nexport default useSelectors;","import { createSelector } from \"reselect\";\r\n\r\n\r\nconst getDataForm = state => {\r\n  return state.formData.dataForm;\r\n};\r\n\r\nexport const getDataFormReselect = createSelector([getDataForm], dataForm => dataForm);\r\n\r\nconst getIsFormValid = state => {\r\n  return state.formData.isFormValid;\r\n};\r\n\r\nexport const getIsFormValidReselect = createSelector([getIsFormValid], isFormValid => isFormValid);\r\n\r\nconst getIsAccount = state => {\r\n  return state.formData.isAccount;\r\n};\r\n\r\nexport const getIsAccountReselect = createSelector([getIsAccount], getIsAccount => getIsAccount);","import React from 'react';\r\nimport classes from './FormRegistration.module.css';\r\nimport InputContainer from './Input/InputContainer';\r\nimport classnames from 'classnames';\r\nimport {submitHandler} from \"../../Utils/submitHandler\";\r\nimport useSelectors from \"../../HOOKS/useSelector\";\r\nimport {getDataFormReselect, getIsAccountReselect, getIsFormValidReselect} from \"../../State/Form-Reselect\";\r\nimport useAction from \"../../HOOKS/useDispatch\";\r\nimport {SET_IS_ACCOUNT_CREATED, SET_IS_FORM_VALID} from \"../../Models/ActionConst\";\r\n\r\n\r\nconst FormRegistration = () => {\r\n  const dataForm = useSelectors(getDataFormReselect)[0];\r\n  const isFormValid = useSelectors(getIsFormValidReselect);\r\n  const isFormValidCheck = useAction(SET_IS_FORM_VALID);\r\n  const isAccountCreated = useAction(SET_IS_ACCOUNT_CREATED);\r\n  const isAccount = useSelectors(getIsAccountReselect);\r\n\r\n\r\n  const setLocalStorate = () => {\r\n    if ((!dataForm.Name || isFormValid[0].Name)\r\n      || (!dataForm.Email || isFormValid[0].Email)\r\n      || (!dataForm.Password || isFormValid[0].Password)\r\n      || (!dataForm['Date of Birth'] || isFormValid[0]['Date of Birth'])\r\n      || (!dataForm['Phone number'] || isFormValid[0]['Phone number'])) {\r\n        for (let n in isFormValid[0]) {\r\n        if (!dataForm[n]) {\r\n          isFormValidCheck([`Заполните поле.`, n])\r\n        }\r\n      }\r\n    } else {\r\n      localStorage.setItem('formData', JSON.stringify(dataForm));\r\n      isAccountCreated();\r\n    }\r\n  };\r\n  \r\n  const type = ['text', 'email', 'password', 'text', 'text'];\r\n  const InputContainers = Object.keys(dataForm).map((inp, index) => {\r\n    return <InputContainer\r\n      key = {index}\r\n      title={inp}\r\n      typeOfInput={type[index]}\r\n      values={dataForm[inp]}\r\n      isFormValidCheck={isFormValidCheck}\r\n      isFormValid={isFormValid[0][inp]}\r\n    />\r\n  });\r\n  return (\r\n    <form onSubmit={submitHandler} className={classes.formRegistration}>\r\n      {InputContainers}\r\n      <div className={classes.item}>\r\n        <button\r\n          onClick={setLocalStorate}\r\n          className={classnames(\r\n            classes.submit,\r\n            isAccount && classes.complete\r\n          )}\r\n          disabled={isAccount}\r\n         >\r\n          {isAccount ? '✓' : 'Create my account'}\r\n        </button>\r\n      </div>\r\n    </form>\r\n  )\r\n};\r\n\r\nexport default FormRegistration;","import React from 'react';\r\nimport classes from \"./CompletedForm.module.css\";\r\n\r\nconst CompletedElement = ({i, index, Naming}) => {\r\n  return (\r\n    <div  className={classes.item}>\r\n      <span className={classes.naming}>{Naming[index]}:</span>\r\n      <input readOnly className={classes.field} value={i}/>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CompletedElement;","import React from 'react';\r\nimport classes from './CompletedForm.module.css';\r\nimport CompletedElement from \"./CompletedElement\";\r\nimport useSelectors from \"../../HOOKS/useSelector\";\r\nimport {getDataFormReselect} from \"../../State/Form-Reselect\";\r\n\r\nconst CompletedForm = () => {\r\n  const dataForm = useSelectors(getDataFormReselect)[0];\r\n  const Naming = ['Name', 'Email', 'Password', 'Date of Birth', 'Phone number'];\r\n  let inputs = Object.values(dataForm).map((i, index) => {\r\n    return <CompletedElement key={index} i = {i} index = {index} Naming={Naming}/>\r\n  });\r\n  \r\n\treturn (\r\n\t\t<form className={classes.completedForm}>\r\n\t\t\t{inputs}\r\n\t\t</form>\r\n\t)\r\n};\r\n\r\nexport default CompletedForm;","import React from 'react';\nimport './App.css';\nimport FormRegistration from './Components/FormToFill/FormRegistration';\nimport CompletedForm from './Components/CompletedForm/CompletedForm';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <FormRegistration/>\n      <CompletedForm/>\n    </div>\n  );\n};\n\n\n\nexport default App;\n","import {getStorage} from \"../Utils/getlocalStorage\";\r\nimport {SET_DATAFORM_NAME, SET_IS_ACCOUNT_CREATED, SET_IS_FORM_VALID} from \"./ActionConst\";\r\n\r\nlet initialState = {\r\n  dataForm: getStorage(),\r\n  isFormValid: [{\r\n    'Name': '',\r\n    'Email': '',\r\n    'Password': '',\r\n    'Date of Birth': '',\r\n    'Phone number': ''\r\n  }],\r\n  isAccount: false\r\n};\r\n\r\nconst formReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SET_DATAFORM_NAME:\r\n      return {\r\n        ...state, dataForm: state.dataForm.map(n => {\r\n          for (let key in n) {\r\n            if (action.payload[1] === key) {\r\n              return {...n, [key]: action.payload[0]}\r\n            }\r\n          }\r\n        })\r\n      };\r\n    case SET_IS_FORM_VALID: {\r\n      return {\r\n        ...state, isFormValid: state.isFormValid.map(n => {\r\n          for (let key in n) {\r\n            if (action.payload[1] === key) {\r\n              return {...n, [key]: action.payload[0]}\r\n            }\r\n          }\r\n        })\r\n      };\r\n    }\r\n    case SET_IS_ACCOUNT_CREATED:\r\n      return {...state, isAccount: true};\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n\r\nexport default formReducer;","export const getStorage = () => {\r\n  if (localStorage.getItem('formData')) {\r\n    console.log(1);\r\n    return [JSON.parse(localStorage.getItem('formData'))];\r\n  }\r\n  return [{\r\n    'Name': '',\r\n    'Email': '',\r\n    'Password': '',\r\n    'Date of Birth': '',\r\n    'Phone number': ''\r\n  }];\r\n};","import { combineReducers, createStore } from \"redux\";\r\nimport formReducer from \"../Models/Form-Reducer\";\r\n\r\nconst reducer = combineReducers(\r\n  {\r\n    formData: formReducer\r\n  }\r\n);\r\n\r\nconst store = createStore(reducer);\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from './State/Store';\nimport {Provider} from \"react-redux\";\n\nReactDOM.render(\n  <Provider store={store}>\n  <App/>\n  </Provider>, document.getElementById('root'));","// extracted by mini-css-extract-plugin\nmodule.exports = {\"completedForm\":\"CompletedForm_completedForm__2cWC9\",\"item\":\"CompletedForm_item__3kKq5\",\"naming\":\"CompletedForm_naming__3vXQb\",\"field\":\"CompletedForm_field__1G2p9\"};"],"sourceRoot":""}