{"version":3,"sources":["Components/CompletedForm/CompletedForm.module.css","Components/FormToFill/FormRegistration.module.css","Components/FormToFill/Input/Input.jsx","Components/FormToFill/Input/InputContainer.jsx","Components/FormToFill/FormRegistration.jsx","Components/CompletedForm/CompletedForm.jsx","State/Form-Reselect.js","State/Form-Reducer.js","Utils/getlocalStorage.js","App.js","State/Store.js","index.js"],"names":["module","exports","React","memo","title","typeOfInput","values","setValue","errorMessage","hFor","isFormValidCheck","useEffect","toLocaleLowerCase","className","classes","item","htmlFor","classNames","naming","invalid","name","id","field","type","value","onChange","e","InputContainer","setData","useState","setErrorMessage","setValues","useCallback","currentTarget","length","test","Math","random","FormRegistration","dataForm","setDataFormName","setDataFormEmail","setDataFormPassword","setDataFormBirth","setDataFormPhone","isFormValid","isAccountCreated","isAccount","onSubmit","preventDefault","formRegistration","email","password","dateOfBirth","phone","onClick","localStorage","setItem","JSON","stringify","submit","complete","CompletedForm","completedForm","getDataForm","state","formData","getIsFormValid","getIsAccount","initialState","getItem","parse","formReducer","action","map","n","console","log","isValid","connect","props","reducer","combineReducers","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ff4225da.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"completedForm\":\"CompletedForm_completedForm__2cWC9\",\"item\":\"CompletedForm_item__3kKq5\",\"naming\":\"CompletedForm_naming__3vXQb\",\"field\":\"CompletedForm_field__1G2p9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formRegistration\":\"FormRegistration_formRegistration__3Db97\",\"item\":\"FormRegistration_item__3pWOk\",\"naming\":\"FormRegistration_naming__lGP69\",\"submit\":\"FormRegistration_submit__25QBC\",\"field\":\"FormRegistration_field__3mwpj\",\"errorMessage\":\"FormRegistration_errorMessage__Z0ylW\",\"invalid\":\"FormRegistration_invalid__3h1at\",\"complete\":\"FormRegistration_complete__ZETju\"};","import React, { useEffect } from 'react';\r\nimport classes from \"../FormRegistration.module.css\";\r\nimport classNames from 'classnames';\r\n\r\nconst Input = ({title, typeOfInput, values, setValue, errorMessage, hFor, isFormValidCheck}) => {\r\n\r\n\r\n  useEffect(() => {\r\n    if (errorMessage) {\r\n      isFormValidCheck(false, title.toLocaleLowerCase());\r\n    } else {isFormValidCheck(true, title.toLocaleLowerCase())}\r\n  }, [values]);\r\n\r\n    return (\r\n      <div className={classes.item}>\r\n        <label htmlFor={hFor} className={classNames(classes.naming, errorMessage && classes.invalid)}>{title}</label>\r\n        <input\r\n          name={title}\r\n          id = {hFor}\r\n          className={classes.field}\r\n          type={typeOfInput}\r\n          value={values}\r\n          onChange={(e) => {setValue(e);}}\r\n        />\r\n        <span className={classes.errorMessage}>{errorMessage}</span>\r\n      </div>\r\n    );\r\n};\r\n\r\nexport default React.memo(Input);","import React, {useState, useCallback} from 'react';\r\nimport Input from \"./Input\";\r\n\r\nconst InputContainer = ({title, typeOfInput, values, setData, isFormValidCheck}) => {\r\n\r\n  const [errorMessage, setErrorMessage] = useState('');\r\n\r\n  const setValues = useCallback((e) => {\r\n    let values = e.currentTarget.value;\r\n    setData(values);\r\n    switch (e.currentTarget.name) {\r\n      case 'Name':\r\n        if (!values.length) {\r\n          setErrorMessage('Имя не может быть пустым.');\r\n        } else {\r\n          (!/^[a-zA-Zа-яА-Я]+$/.test(values))\r\n            ? setErrorMessage('Имя может содержать только буквы.')\r\n            : setErrorMessage('');\r\n        }\r\n        break;\r\n      case 'Email':\r\n        if (!values.length) {\r\n          setErrorMessage('Email обязателен к заполнению.');\r\n        } else {\r\n          (!/^([A-Za-z0-9_\\-\\.])+\\@([A-Za-z0-9])+\\.([A-Za-z]{2,4})$/.test(values))\r\n            ? setErrorMessage('Некорректный Email.')\r\n            : setErrorMessage('');\r\n        }\r\n        break;\r\n      case 'Password':\r\n        (values.length < 6)\r\n          ? setErrorMessage('Пароль слишком короткий.')\r\n          : setErrorMessage('');\r\n        break;\r\n      case 'Date of Birth':\r\n        if (!values.length) {\r\n          setErrorMessage('Дата обязательна.');\r\n        } else {\r\n          (!/^\\d\\d.\\d\\d.[\\d]{4}$/.test(values))\r\n            ? setErrorMessage('Введите дату в формате ДД-ММ-ГГГГ.')\r\n            : setErrorMessage('');\r\n        }\r\n        break;\r\n      case 'Phone number':\r\n        ((!/(^\\+7[0-9]{10}$)|(^8[0-9]{10}$)/.test(values)))\r\n          ? setErrorMessage('Номер телефона начинается с +7 или 8 и содержит всего 11 цифр')\r\n          : setErrorMessage('');\r\n        break;\r\n    }\r\n  }, [values]);\r\n  const hFor = `${title}-${Math.random()}`;\r\n  return (\r\n    <Input title={title} typeOfInput={typeOfInput} values={values} setValue={setValues} errorMessage={errorMessage}\r\n           hFor={hFor} isFormValidCheck={isFormValidCheck}/>\r\n  );\r\n};\r\n\r\nexport default InputContainer;","import React from 'react';\r\nimport classes from './FormRegistration.module.css';\r\nimport InputContainer from \"./Input/InputContainer\";\r\nimport classNames from 'classnames';\r\n\r\n\r\nconst FormRegistration = ({\r\n                            dataForm,\r\n                            setDataFormName,\r\n                            setDataFormEmail,\r\n                            setDataFormPassword,\r\n                            setDataFormBirth,\r\n                            setDataFormPhone,\r\n                            isFormValidCheck,\r\n                            isFormValid,\r\n                            isAccountCreated,\r\n                            isAccount\r\n                          }) => {\r\n\r\n  const submitHandler = e => {\r\n    e.preventDefault();\r\n  };\r\n\r\n\r\n  const setLocalStorate = () => {\r\n    if (isFormValid[0].name && isFormValid[0].email && isFormValid[0].password && isFormValid[0].dateOfBirth && isFormValid[0].phone) {\r\n      localStorage.setItem('formData', JSON.stringify(dataForm));\r\n      isAccountCreated();\r\n    }\r\n  };\r\n\r\n\r\n  return (\r\n    <form onSubmit={submitHandler} className={classes.formRegistration}>\r\n      <InputContainer title='Name' typeOfInput=\"text\" values={dataForm.name} setData={setDataFormName}\r\n                      isFormValidCheck={isFormValidCheck}/>\r\n      <InputContainer title='Email' typeOfInput=\"email\" values={dataForm.email} setData={setDataFormEmail}\r\n                      isFormValidCheck={isFormValidCheck}/>\r\n      <InputContainer title='Password' typeOfInput=\"password\" values={dataForm.password} setData={setDataFormPassword}\r\n                      isFormValidCheck={isFormValidCheck}/>\r\n      <InputContainer title='Date of Birth' typeOfInput=\"text\" values={dataForm.dateOfBirth} setData={setDataFormBirth}\r\n                      isFormValidCheck={isFormValidCheck}/>\r\n      <InputContainer title='Phone number' typeOfInput=\"text\" values={dataForm.phone} setData={setDataFormPhone}\r\n                      isFormValidCheck={isFormValidCheck}/>\r\n      <div className={classes.item}>\r\n        <button\r\n          onClick={setLocalStorate}\r\n          className={classNames(classes.submit, isAccount && classes.complete)}>\r\n          {isAccount ?  '✓' : 'Create my account'}\r\n        </button>\r\n      </div>\r\n    </form>\r\n  )\r\n};\r\n\r\nexport default FormRegistration;","import React from 'react';\r\nimport classes from './CompletedForm.module.css';\r\n\r\nconst CompletedForm = ({dataForm}) => {\r\n  return (\r\n    <form className={classes.completedForm}>\r\n      <div className={classes.item}>\r\n        <span className={classes.naming}>Name:</span>\r\n        <span className={classes.field}>{dataForm.name}</span>\r\n      </div>\r\n      <div className={classes.item}>\r\n        <span className={classes.naming}>Email:</span>\r\n        <span className={classes.field}>{dataForm.email}</span>\r\n      </div>\r\n      <div className={classes.item}>\r\n        <span className={classes.naming}>Password:</span>\r\n        <span className={classes.field}>{dataForm.password}</span>\r\n      </div>\r\n      <div className={classes.item}>\r\n        <span className={classes.naming}>Date of Birth:</span>\r\n        <span className={classes.field}>{dataForm.dateOfBirth}</span>\r\n      </div>\r\n      <div className={classes.item}>\r\n        <span className={classes.naming}>Phone number:</span>\r\n        <span className={classes.field}>{dataForm.phone}</span>\r\n      </div>\r\n    </form>\r\n  )\r\n};\r\n\r\nexport default CompletedForm;","export const getDataForm = state => {\r\n  return state.formData.dataForm;\r\n};\r\n\r\nexport const getIsFormValid = state => {\r\n  return state.formData.isFormValid;\r\n};\r\n\r\nexport const getIsAccount = state => {\r\n  return state.formData.isAccount;\r\n};","import {getStorage} from \"../Utils/getlocalStorage\";\r\n\r\nconst SET_DATAFORM_NAME = 'SET_DATAFORM_NAME';\r\nconst SET_DATAFORM_EMAIL = 'SET_DATAFORM_EMAIL';\r\nconst SET_DATAFORM_PASSWORD = 'SET_DATAFORM_PASSWORD';\r\nconst SET_DATAFORM_DATE_OF_BIRTH = 'SET_DATAFORM_DATE_OF_BIRTH';\r\nconst SET_DATAFORM_PHONE = 'SET_DATAFORM_PHONE';\r\nconst SET_IS_FORM_VALID = 'SET_IS_FORM_VALID';\r\nconst SET_IS_ACCOUNT_CREATED = 'SET_IS_ACCOUNT_CREATED';\r\n\r\nlet initialState = {\r\n  dataForm: getStorage(),\r\n  isFormValid: [{\r\n    name: false,\r\n    email: false,\r\n    password: false,\r\n    dateOfBirth: false,\r\n    phone: false\r\n  }],\r\n  isAccount: false\r\n};\r\n\r\nconst formReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SET_DATAFORM_NAME:\r\n      return {\r\n        ...state, dataForm: state.dataForm.map(n => {\r\n          return {...n, name: action.name}\r\n        })\r\n      };\r\n    case SET_DATAFORM_EMAIL:\r\n      return {\r\n        ...state, dataForm: state.dataForm.map(n => {\r\n          return {...n, email: action.email}\r\n        })\r\n      };\r\n    case SET_DATAFORM_PASSWORD:\r\n      return {\r\n        ...state, dataForm: state.dataForm.map(n => {\r\n          return {...n, password: action.password}\r\n        })\r\n      };\r\n    case SET_DATAFORM_DATE_OF_BIRTH:\r\n      return {\r\n        ...state, dataForm: state.dataForm.map(n => {\r\n          return {...n, dateOfBirth: action.dateOfBirth}\r\n        })\r\n      };\r\n    case SET_DATAFORM_PHONE:\r\n      return {\r\n        ...state, dataForm: state.dataForm.map(n => {\r\n          return {...n, phone: action.phone}\r\n        })\r\n      };\r\n    case SET_IS_FORM_VALID: {\r\n      return {\r\n        ...state, isFormValid: state.isFormValid.map(n => {\r\n          console.log(n);\r\n          if ('name' === action.field) return {...n, name: action.isValid};\r\n          if ('email' === action.field) return {...n, email: action.isValid};\r\n          if ('password' === action.field)  return {...n, password: action.isValid};\r\n          if ('date of birth' === action.field) return {...n, dateOfBirth: action.isValid};\r\n          if ('phone number' === action.field)  return {...n, phone: action.isValid};\r\n          else {return {...n}}\r\n        })\r\n      };\r\n    }\r\n    case SET_IS_ACCOUNT_CREATED:\r\n    return {...state, isAccount: true};\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const setDataFormName = (name) => ({type: SET_DATAFORM_NAME, name});\r\nexport const setDataFormEmail = (email) => ({type: SET_DATAFORM_EMAIL, email});\r\nexport const setDataFormPassword = (password) => ({type: SET_DATAFORM_PASSWORD, password});\r\nexport const setDataFormBirth = (dateOfBirth) => ({type: SET_DATAFORM_DATE_OF_BIRTH, dateOfBirth});\r\nexport const setDataFormPhone = (phone) => ({type: SET_DATAFORM_PHONE, phone});\r\nexport const isFormValidCheck = (isValid, field) => ({type: SET_IS_FORM_VALID, isValid, field});\r\nexport const isAccountCreated = () => ({type: SET_IS_ACCOUNT_CREATED});\r\n\r\nexport default formReducer;","export const getStorage = () => {\r\n  if (localStorage.getItem('formData')) {\r\n    return [JSON.parse(localStorage.getItem('formData'))];\r\n  }\r\n  return [{\r\n    name: '',\r\n    email: '',\r\n    password: '',\r\n    dateOfBirth: '',\r\n    phone: ''\r\n  }];\r\n};","import React from 'react';\nimport './App.css';\nimport FormRegistration from \"./Components/FormToFill/FormRegistration\";\nimport CompletedForm from \"./Components/CompletedForm/CompletedForm\";\nimport {connect} from 'react-redux';\nimport {getDataForm, getIsAccount, getIsFormValid} from \"./State/Form-Reselect\";\nimport {\n  isAccountCreated,\n  isFormValidCheck,\n  setDataFormBirth,\n  setDataFormEmail,\n  setDataFormName,\n  setDataFormPassword,\n  setDataFormPhone\n} from \"./State/Form-Reducer\";\n\nconst App = (props) => {\n  return (\n    <div className=\"App\">\n      <FormRegistration\n        dataForm={props.dataForm[0]}\n        setDataFormName={props.setDataFormName}\n        setDataFormEmail = {props.setDataFormEmail}\n        setDataFormPassword={props.setDataFormPassword}\n        setDataFormBirth={props.setDataFormBirth}\n        setDataFormPhone={props.setDataFormPhone}\n        isFormValidCheck = {props.isFormValidCheck}\n        isFormValid = {props.isFormValid}\n        isAccountCreated = {props.isAccountCreated}\n        isAccount = {props.isAccount}\n      />\n      <CompletedForm dataForm={props.dataForm[0]}/>\n    </div>\n  );\n};\n\nconst mapStateToProps = state => {\n  return {\n    dataForm: getDataForm(state),\n    isFormValid: getIsFormValid(state),\n    isAccount: getIsAccount(state)\n  }\n};\n\nexport default connect(mapStateToProps, {\n  setDataFormName,\n  setDataFormEmail,\n  setDataFormPassword,\n  setDataFormBirth,\n  setDataFormPhone,\n  isFormValidCheck,\n  isAccountCreated\n})(App);\n","import { combineReducers, createStore } from \"redux\";\r\nimport formReducer from \"./Form-Reducer\";\r\n\r\nconst reducer = combineReducers(\r\n  {\r\n    formData: formReducer\r\n  }\r\n);\r\n\r\nconst store = createStore(reducer);\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from \"./State/Store\";\n\nReactDOM.render(<App store = {store} />, document.getElementById('root'));\n"],"sourceRoot":""}