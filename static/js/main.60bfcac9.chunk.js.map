{"version":3,"sources":["components/formToFill/FormRegistration.module.css","models/reducers.js","utils/getlocalStorage.js","models/actions.js","state/store.js","components/formToFill/input/Input.jsx","hooks/useAction.js","components/formToFill/input/InputContainer.jsx","utils/validators.js","utils/submitHandler.js","hooks/useSelector.js","models/selectors.js","components/formToFill/FormRegistration.jsx","components/completedForm/CompletedElement.jsx","components/completedForm/CompletedForm.jsx","index.js","components/completedForm/CompletedForm.module.css"],"names":["module","exports","initialState","dataForm","localStorage","getItem","JSON","parse","isFormValid","isAccount","reducers","state","action","type","map","n","payload","reducer","combineReducers","formData","store","createStore","memo","title","typeOfInput","values","setValue","errorMessage","hFor","className","classes","item","htmlFor","classnames","naming","invalid","name","id","field","value","onChange","maxLength","useAction","dispatch","useDispatch","useCallback","InputContainer","isFormValidCheck","Math","random","setData","setValues","e","currentTarget","length","test","isValidName","isValidEmail","isValidPassword","isValidDate","isValidPhone","submitHandler","preventDefault","func","params","useSelector","getDataFormSelector","createSelector","getIsFormValidSelector","getIsAccountSelector","getIsAccount","FormRegistration","useSelectors","isAccountCreated","InputContainers","Object","keys","inp","index","key","onSubmit","formRegistration","onClick","Name","Email","Password","setItem","stringify","submit","complete","disabled","CompletedElement","i","Naming","readOnly","CompletedForm","inputs","completedForm","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.60bfcac9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formRegistration\":\"FormRegistration_formRegistration__2cm6l\",\"item\":\"FormRegistration_item__3E9F-\",\"naming\":\"FormRegistration_naming__2Oc7s\",\"submit\":\"FormRegistration_submit__1RApL\",\"field\":\"FormRegistration_field__2keC6\",\"errorMessage\":\"FormRegistration_errorMessage__17nTc\",\"invalid\":\"FormRegistration_invalid__tJIwt\",\"complete\":\"FormRegistration_complete__8dZnv\"};","import { getStorage } from '../utils/getlocalStorage';\r\nimport {\r\n  SET_DATAFORM_NAME,\r\n  SET_IS_ACCOUNT_CREATED,\r\n  SET_IS_FORM_VALID\r\n} from './actions';\r\n\r\nlet initialState = {\r\n  dataForm: getStorage(),\r\n  isFormValid: [{\r\n    'Name': '',\r\n    'Email': '',\r\n    'Password': '',\r\n    'Date of Birth': '',\r\n    'Phone number': ''\r\n  }],\r\n  isAccount: false\r\n};\r\n\r\nconst reducers = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SET_DATAFORM_NAME:\r\n      return {\r\n        ...state, dataForm: state.dataForm.map(n => {\r\n          return {...n, [action.payload[1]]: action.payload[0]}\r\n        })\r\n      };\r\n    case SET_IS_FORM_VALID: {\r\n      return {\r\n        ...state, isFormValid: state.isFormValid.map(n => {\r\n          return {...n, [action.payload[1]]: action.payload[0]}\r\n        })\r\n      };\r\n    }\r\n    case SET_IS_ACCOUNT_CREATED:\r\n      return {...state, isAccount: true};\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n\r\nexport default reducers;","export const getStorage = () => {\r\n  if (localStorage.getItem('formData')) {\r\n    return [JSON.parse(localStorage.getItem('formData'))];\r\n  }\r\n  return [{\r\n    'Name': '',\r\n    'Email': '',\r\n    'Password': '',\r\n    'Date of Birth': '',\r\n    'Phone number': ''\r\n  }];\r\n};","export const SET_DATAFORM_NAME = 'SET_DATAFORM_NAME';\r\nexport const SET_IS_FORM_VALID = 'SET_IS_FORM_VALID';\r\nexport const SET_IS_ACCOUNT_CREATED = 'SET_IS_ACCOUNT_CREATED';","import { combineReducers, createStore } from 'redux';\r\nimport reducers from '../models/reducers';\r\n\r\nconst reducer = combineReducers(\r\n  {\r\n    formData: reducers\r\n  }\r\n);\r\n\r\nconst store = createStore(reducer);\r\n\r\nexport default store;","import React, { memo }  from 'react';\r\nimport classes from '../FormRegistration.module.css';\r\nimport classnames from 'classnames';\r\n\r\nconst Input = ({\r\n  title,\r\n  typeOfInput,\r\n  values,\r\n  setValue,\r\n  errorMessage,\r\n  hFor\r\n}) => {\r\n  \r\n  return (\r\n    <div className={classes.item}>\r\n      <label\r\n        htmlFor={hFor}\r\n        className={classnames(\r\n          classes.naming,\r\n          errorMessage && classes.invalid\r\n        )}>\r\n        {title}\r\n      </label>\r\n      <input\r\n        name={title}\r\n        id={hFor}\r\n        className={classes.field}\r\n        type={typeOfInput}\r\n        value={values}\r\n        onChange={setValue}\r\n        maxLength='40'\r\n      />\r\n      <span className={classes.errorMessage}>{errorMessage}</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default memo(Input);","import { useCallback } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nconst useAction = type => {\r\n  const dispatch = useDispatch();\r\n  return useCallback((payload = {}) => dispatch({type, payload}), [\r\n    dispatch,\r\n    type\r\n  ]);\r\n};\r\n\r\nexport default useAction;\r\n\r\n","import React, { useCallback } from 'react';\r\nimport Input from './Input';\r\nimport {\r\n  isValidDate,\r\n  isValidEmail,\r\n  isValidName,\r\n  isValidPassword,\r\n  isValidPhone\r\n} from '../../../utils/validators';\r\nimport useAction from '../../../hooks/useAction';\r\nimport { SET_DATAFORM_NAME } from '../../../models/actions';\r\n\r\nconst InputContainer = ({\r\n  title,\r\n  typeOfInput,\r\n  values,\r\n  isFormValidCheck,\r\n  isFormValid\r\n}) => {\r\n  \r\n  const hFor = `${title}-${Math.random()}`;\r\n  const setData = useAction(SET_DATAFORM_NAME);\r\n  \r\n  \r\n  const setValues = useCallback((e) => {\r\n    const value = e.currentTarget.value;\r\n    setData([value, title]);\r\n    switch (e.currentTarget.name) {\r\n      case 'Name':\r\n        isValidName(value, isFormValidCheck, 'Name');\r\n        break;\r\n      case 'Email':\r\n        isValidEmail(value, isFormValidCheck, 'Email');\r\n        break;\r\n      case 'Password':\r\n        isValidPassword(value, isFormValidCheck, 'Password');\r\n        break;\r\n      case 'Date of Birth':\r\n        isValidDate(value, isFormValidCheck, 'Date of Birth');\r\n        break;\r\n      case 'Phone number':\r\n        isValidPhone(value, isFormValidCheck, 'Phone number');\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }, [setData, title, isFormValidCheck]);\r\n  \r\n\r\n  \r\n  return (\r\n    <Input\r\n      title={title}\r\n      typeOfInput={typeOfInput}\r\n      values={values}\r\n      setValue={setValues}\r\n      errorMessage={isFormValid}\r\n      hFor={hFor}\r\n    />\r\n  );\r\n};\r\n\r\nexport default InputContainer;","export const isValidName = (values, isFormValidCheck, title) => {\r\n  if (!values.length) {\r\n    isFormValidCheck(['Имя не может быть пустым.', title]);\r\n  } else {\r\n    (!/^[a-zA-Zа-яА-Я]+$/.test(values))\r\n      ? isFormValidCheck(['Имя может содержать только буквы.', title])\r\n      : isFormValidCheck(['', title]);\r\n  }\r\n};\r\n\r\nexport const isValidEmail = (values, isFormValidCheck, title) => {\r\n  if (!values.length) {\r\n    isFormValidCheck(['Email обязателен к заполнению.', title]);\r\n  } else {\r\n    (!/^([A-Za-z0-9_\\-.])+@([A-Za-z0-9])+\\.([A-Za-z]{2,4})$/.test(values))\r\n      ? isFormValidCheck(['Некорректный Email.', title])\r\n      : isFormValidCheck(['', title]);\r\n  }\r\n};\r\n\r\nexport const isValidPassword = (values, isFormValidCheck, title) => {\r\n  (values.length < 6)\r\n    ? isFormValidCheck(['Пароль слишком короткий.', title])\r\n    : isFormValidCheck(['', title]);\r\n};\r\n\r\nexport const isValidDate = (values, isFormValidCheck, title) => {\r\n  if (!values.length) {\r\n    isFormValidCheck(['Дата обязательна.', title]);\r\n  } else {\r\n    (!/^\\d\\d.\\d\\d.[\\d]{4}$/.test(values))\r\n      ? isFormValidCheck(['Введите дату в формате ДД-ММ-ГГГГ.', title])\r\n      : isFormValidCheck(['', title]);\r\n  }\r\n};\r\n\r\nexport const isValidPhone = (values, isFormValidCheck, title) => {\r\n  ((!/(^\\+7[0-9]{10}$)|(^8[0-9]{10}$)/.test(values)))\r\n    ? isFormValidCheck(['Номер телефона начинается с +7 или 8.', title])\r\n    : isFormValidCheck(['', title]);\r\n};","export const submitHandler = e => {\r\n  e.preventDefault();\r\n};","import { useSelector } from 'react-redux';\r\n\r\nexport default (func, params = {}) => useSelector(state => func(state, params));\r\n","import { createSelector } from 'reselect';\r\n\r\n\r\nconst getDataForm = state => {\r\n  return state.formData.dataForm;\r\n};\r\n\r\nexport const getDataFormSelector = createSelector([getDataForm], dataForm => dataForm);\r\n\r\nconst getIsFormValid = state => {\r\n  return state.formData.isFormValid;\r\n};\r\n\r\nexport const getIsFormValidSelector = createSelector([getIsFormValid], isFormValid => isFormValid);\r\n\r\nconst getIsAccount = state => {\r\n  return state.formData.isAccount;\r\n};\r\n\r\nexport const getIsAccountSelector = createSelector([getIsAccount], getIsAccount => getIsAccount);","import React from 'react';\r\nimport classes from './FormRegistration.module.css';\r\nimport InputContainer from './input/InputContainer';\r\nimport classnames from 'classnames';\r\nimport { submitHandler } from '../../utils/submitHandler';\r\nimport useSelectors from '../../hooks/useSelector';\r\nimport {\r\n  getDataFormSelector,\r\n  getIsAccountSelector,\r\n  getIsFormValidSelector\r\n} from '../../models/selectors';\r\nimport useAction from '../../hooks/useAction';\r\nimport {\r\n  SET_IS_ACCOUNT_CREATED,\r\n  SET_IS_FORM_VALID\r\n} from '../../models/actions';\r\n\r\n\r\nconst FormRegistration = () => {\r\n  const dataForm = useSelectors(getDataFormSelector)[0];\r\n  const isFormValid = useSelectors(getIsFormValidSelector);\r\n  const isFormValidCheck = useAction(SET_IS_FORM_VALID);\r\n  const isAccountCreated = useAction(SET_IS_ACCOUNT_CREATED);\r\n  const isAccount = useSelectors(getIsAccountSelector);\r\n\r\n\r\n  const setLocalStorate = () => {\r\n    if ((!dataForm.Name || isFormValid[0].Name)\r\n      || (!dataForm.Email || isFormValid[0].Email)\r\n      || (!dataForm.Password || isFormValid[0].Password)\r\n      || (!dataForm['Date of Birth'] || isFormValid[0]['Date of Birth'])\r\n      || (!dataForm['Phone number'] || isFormValid[0]['Phone number'])) {\r\n        for (let n in isFormValid[0]) {\r\n        if (!dataForm[n]) {\r\n          isFormValidCheck([`Заполните поле.`, n])\r\n        }\r\n      }\r\n    } else {\r\n      localStorage.setItem('formData', JSON.stringify(dataForm));\r\n      isAccountCreated();\r\n    }\r\n  };\r\n  \r\n  const type = ['text', 'email', 'password', 'text', 'text'];\r\n  const InputContainers = Object.keys(dataForm).map((inp, index) => {\r\n    return <InputContainer\r\n      key = {index}\r\n      title={inp}\r\n      typeOfInput={type[index]}\r\n      values={dataForm[inp]}\r\n      isFormValidCheck={isFormValidCheck}\r\n      isFormValid={isFormValid[0][inp]}\r\n    />\r\n  });\r\n  \r\n  return (\r\n    <form onSubmit={submitHandler} className={classes.formRegistration}>\r\n      {InputContainers}\r\n      <div className={classes.item}>\r\n        <button\r\n          onClick={setLocalStorate}\r\n          className={classnames(\r\n            classes.submit,\r\n            isAccount && classes.complete\r\n          )}\r\n          disabled={isAccount}\r\n         >\r\n          {isAccount ? '✓' : 'Create my account'}\r\n        </button>\r\n      </div>\r\n    </form>\r\n  )\r\n};\r\n\r\nexport default FormRegistration;","import React from 'react';\r\nimport classes from \"./CompletedForm.module.css\";\r\n\r\nconst CompletedElement = ({i, index, Naming}) => {\r\n  return (\r\n    <div  className={classes.item}>\r\n      <span className={classes.naming}>{Naming[index]}:</span>\r\n      <input readOnly className={classes.field} value={i} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CompletedElement;","import React from 'react';\r\nimport classes from './CompletedForm.module.css';\r\nimport CompletedElement from './CompletedElement';\r\nimport useSelector from '../../hooks/useSelector';\r\nimport { getDataFormSelector } from '../../models/selectors';\r\n\r\nconst CompletedForm = () => {\r\n  const dataForm = useSelector(getDataFormSelector)[0];\r\n  const Naming = ['Name', 'Email', 'Password', 'Date of Birth', 'Phone number'];\r\n  const inputs = Object.values(dataForm).map((i, index) => {\r\n    return <CompletedElement key={index} i={i} index={index} Naming={Naming} />\r\n  });\r\n  \r\n  return (\r\n    <form className={classes.completedForm}>\r\n      {inputs}\r\n    </form>\r\n  )\r\n};\r\n\r\nexport default CompletedForm;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport store from './state/store';\nimport { Provider } from \"react-redux\";\nimport FormRegistration from './components/formToFill/FormRegistration';\nimport CompletedForm from './components/completedForm/CompletedForm';\n\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <FormRegistration />\n      <CompletedForm />\n    </div>\n  );\n};\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>, document.getElementById('root'));\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"completedForm\":\"CompletedForm_completedForm__3Qan5\",\"item\":\"CompletedForm_item__3pOvJ\",\"naming\":\"CompletedForm_naming__2qNCu\",\"field\":\"CompletedForm_field__1-onz\"};"],"sourceRoot":""}