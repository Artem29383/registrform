{"version":3,"sources":["components/formToFill/FormRegistration.module.css","utils/deepCopy.js","models/reducers.js","utils/getlocalStorage.js","models/actions.js","state/store.js","components/formToFill/input/Input.jsx","hooks/useAction.js","components/formToFill/input/InputContainer.jsx","utils/validators.js","utils/submitHandler.js","hooks/useSelector.js","models/selectors.js","components/formToFill/FormRegistration.jsx","utils/isValidFields.js","components/completedForm/CompletedElement.jsx","components/completedForm/CompletedForm.jsx","index.js","components/completedForm/CompletedForm.module.css"],"names":["module","exports","original","JSON","parse","stringify","initialState","dataForm","localStorage","getItem","isFormValid","isAccount","reducers","state","action","type","isDataFormCopy","deepCopy","payload","text","fieldName","isFormValidCopy","reducer","combineReducers","formData","store","createStore","memo","title","typeOfInput","values","setValues","errorMessage","hFor","mask","className","classes","item","htmlFor","classnames","naming","invalid","name","id","field","value","onChange","useAction","dispatch","useDispatch","useCallback","InputContainer","isFormValidCheck","Math","random","setData","e","currentTarget","length","test","isValidName","isValidEmail","isValidPassword","isValidDate","isValidPhone","isValidAge","submitHandler","preventDefault","func","params","useSelector","getDataFormSelector","createSelector","getIsFormValidSelector","getIsAccountSelector","getIsAccount","FormRegistration","useSelectors","isAccountCreated","InputContainers","Object","keys","map","inp","index","key","onSubmit","formRegistration","onClick","isValidFields","n","setItem","submit","complete","disabled","CompletedElement","dataFormItem","readOnly","CompletedForm","inputs","entries","completedForm","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2f4c24cd.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formRegistration\":\"FormRegistration_formRegistration__2cm6l\",\"item\":\"FormRegistration_item__3E9F-\",\"naming\":\"FormRegistration_naming__2Oc7s\",\"submit\":\"FormRegistration_submit__1RApL\",\"field\":\"FormRegistration_field__2keC6\",\"errorMessage\":\"FormRegistration_errorMessage__17nTc\",\"invalid\":\"FormRegistration_invalid__tJIwt\",\"complete\":\"FormRegistration_complete__8dZnv\"};","export default original => JSON.parse(JSON.stringify(original));\r\n","import { getStorage } from '../utils/getlocalStorage';\r\nimport {\r\n  SET_DATAFORM_NAME,\r\n  SET_IS_ACCOUNT_CREATED,\r\n  SET_IS_FORM_VALID\r\n} from './actions';\r\nimport deepCopy from '../utils/deepCopy';\r\n\r\nconst initialState = {\r\n  dataForm: getStorage(),\r\n  isFormValid: {\r\n    'Name': '',\r\n    'Email': '',\r\n    'Password': '',\r\n    'Date of Birth': '',\r\n    'Phone number': '',\r\n    'Age': ''\r\n  },\r\n  isAccount: false\r\n};\r\n\r\nconst reducers = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    \r\n    \r\n    case SET_DATAFORM_NAME: {\r\n      const isDataFormCopy = deepCopy(state.dataForm);\r\n      const { text, fieldName } = action.payload;\r\n      isDataFormCopy[fieldName] = text;\r\n      return {\r\n        ...state,\r\n        dataForm: isDataFormCopy\r\n      };\r\n    }\r\n    \r\n    \r\n    case SET_IS_FORM_VALID: {\r\n      const isFormValidCopy = deepCopy(state.isFormValid);\r\n      const { text, fieldName } = action.payload;\r\n      isFormValidCopy[fieldName] = text;\r\n      return {\r\n        ...state,\r\n        isFormValid: isFormValidCopy\r\n      };\r\n    }\r\n    \r\n    \r\n    case SET_IS_ACCOUNT_CREATED:\r\n      return { ...state, isAccount: true };\r\n    \r\n    \r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n\r\nexport default reducers;","export const getStorage = () => {\r\n  if (localStorage.getItem('formData')) {\r\n    return JSON.parse(localStorage.getItem('formData'));\r\n  }\r\n  return {\r\n    'Name': '',\r\n    'Email': '',\r\n    'Password': '',\r\n    'Date of Birth': '',\r\n    'Phone number': '',\r\n    'Age': ''\r\n  };\r\n};","export const SET_DATAFORM_NAME = 'SET_DATAFORM_NAME';\r\nexport const SET_IS_FORM_VALID = 'SET_IS_FORM_VALID';\r\nexport const SET_IS_ACCOUNT_CREATED = 'SET_IS_ACCOUNT_CREATED';","import {\r\n  combineReducers,\r\n  createStore\r\n} from 'redux';\r\nimport reducers from '../models/reducers';\r\n\r\nconst reducer = combineReducers(\r\n  {\r\n    formData: reducers\r\n  }\r\n);\r\n\r\nconst store = createStore(reducer);\r\n\r\nexport default store;","import React, { memo }  from 'react';\r\nimport classes from '../FormRegistration.module.css';\r\nimport classnames from 'classnames';\r\nimport InputElement from 'react-input-mask';\r\n\r\n\r\nconst Input = ({\r\n  title,\r\n  typeOfInput,\r\n  values,\r\n  setValues,\r\n  errorMessage,\r\n  hFor,\r\n  mask\r\n}) => (\r\n  <div className={classes.item}>\r\n    <label\r\n      htmlFor={hFor}\r\n      className={classnames(\r\n        classes.naming,\r\n        errorMessage && classes.invalid\r\n      )}>\r\n      {title}\r\n    </label>\r\n    <InputElement\r\n      name={title}\r\n      id={hFor}\r\n      className={classes.field}\r\n      type={typeOfInput}\r\n      value={values}\r\n      onChange={setValues}\r\n      mask = {mask}\r\n    />\r\n    <span className={classes.errorMessage}>\r\n      {errorMessage}\r\n    </span>\r\n  </div>\r\n);\r\n\r\nexport default memo(Input);","import { useCallback } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nconst useAction = type => {\r\n  const dispatch = useDispatch();\r\n  return useCallback((payload = {}) => dispatch({type, payload}), [\r\n    dispatch,\r\n    type\r\n  ]);\r\n};\r\n\r\nexport default useAction;\r\n\r\n","import React, { useCallback } from 'react';\r\nimport Input from './Input';\r\nimport {\r\n  isValidAge,\r\n  isValidDate,\r\n  isValidEmail,\r\n  isValidName,\r\n  isValidPassword,\r\n  isValidPhone\r\n} from '../../../utils/validators';\r\nimport useAction from '../../../hooks/useAction';\r\nimport { SET_DATAFORM_NAME } from '../../../models/actions';\r\n\r\nconst InputContainer = ({\r\n  title,\r\n  typeOfInput,\r\n  values,\r\n  isFormValidCheck,\r\n  isFormValid,\r\n}) => {\r\n  \r\n  const hFor = `${title}-${Math.random()}`;\r\n  const setData = useAction(SET_DATAFORM_NAME);\r\n  \r\n  const setValues = useCallback((e) => {\r\n    const value = e.currentTarget.value;\r\n    setData({ text: value, fieldName: title });\r\n    switch (e.currentTarget.name) {\r\n      case 'Name':\r\n        isValidName(value, isFormValidCheck, 'Name');\r\n        break;\r\n      case 'Email':\r\n        isValidEmail(value, isFormValidCheck, 'Email');\r\n        break;\r\n      case 'Password':\r\n        isValidPassword(value, isFormValidCheck, 'Password');\r\n        break;\r\n      case 'Date of Birth':\r\n        isValidDate(value, isFormValidCheck, 'Date of Birth');\r\n        break;\r\n      case 'Phone number':\r\n        isValidPhone(value, isFormValidCheck, 'Phone number');\r\n        break;\r\n      case 'Age':\r\n        isValidAge(value, isFormValidCheck, 'Age');\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }, [setData, title, isFormValidCheck]);\r\n  \r\n  const masks = {\r\n    'Date of Birth': \"99-99-9999\",\r\n    'Phone number': \"+7 (999) 999-99-99\"\r\n  };\r\n  \r\n  return (\r\n    <Input\r\n      title={title}\r\n      typeOfInput={typeOfInput}\r\n      values={values}\r\n      setValues={setValues}\r\n      errorMessage={isFormValid}\r\n      hFor={hFor}\r\n      mask = {masks[title]}\r\n    />\r\n  );\r\n};\r\n\r\nexport default InputContainer;","export const isValidName = (values, isFormValidCheck, title) => {\r\n  if (!values.length) {\r\n    isFormValidCheck({ text: 'Имя не может быть пустым.', fieldName: title });\r\n  } else {\r\n    (!/^[a-zA-Zа-яА-Я]+$/.test(values))\r\n      ? isFormValidCheck({ text: 'Имя может содержать только буквы.', fieldName: title })\r\n      : isFormValidCheck({ text: '', fieldName: title });\r\n  }\r\n};\r\n\r\nexport const isValidEmail = (values, isFormValidCheck, title) => {\r\n  if (!values.length) {\r\n    isFormValidCheck({ text: 'Email обязателен к заполнению.', fieldName: title });\r\n  } else {\r\n    (!/^([A-Za-z0-9_\\-.])+@([A-Za-z0-9])+\\.([A-Za-z]{2,4})$/.test(values))\r\n      ? isFormValidCheck({ text: 'Некорректный Email.', fieldName: title })\r\n      : isFormValidCheck({ text: '', fieldName: title });\r\n  }\r\n};\r\n\r\nexport const isValidPassword = (values, isFormValidCheck, title) => {\r\n  (values.length < 6)\r\n    ? isFormValidCheck({ text: 'Пароль слишком короткий.', fieldName: title })\r\n    : isFormValidCheck({ text: '', fieldName: title });\r\n};\r\n\r\nexport const isValidDate = (values, isFormValidCheck, title) => {\r\n  (!/^\\d\\d-\\d\\d-[\\d]{4}$/.test(values))\r\n    ? isFormValidCheck({ text: 'Введите дату в формате ДД-ММ-ГГГГ.', fieldName: title })\r\n    : isFormValidCheck({ text: '', fieldName: title });\r\n};\r\n\r\nexport const isValidPhone = (values, isFormValidCheck, title) => {\r\n  ((!/(\\+7\\s\\([0-9]{3}\\)\\s[0-9]{3}-[0-9]{2}-[0-9]{2})/.test(values)))\r\n    ? isFormValidCheck({ text: 'Номер состоит из 10 цифр.', fieldName: title })\r\n    : isFormValidCheck({ text: '', fieldName: title });\r\n};\r\n\r\nexport const isValidAge = (values, isFormValidCheck, title) => {\r\n  (values < 18)\r\n    ? isFormValidCheck({ text: 'Регистрация с 18 лет.', fieldName: title })\r\n    : isFormValidCheck({ text: '', fieldName: title })\r\n};","export const submitHandler = e => {\r\n  e.preventDefault();\r\n};","import { useSelector } from 'react-redux';\r\n\r\nexport default (func, params = {}) => useSelector(state => func(state, params));\r\n","import { createSelector } from 'reselect';\r\n\r\nconst getDataForm = state => {\r\n  return state.formData.dataForm;\r\n};\r\n\r\nexport const getDataFormSelector = createSelector([getDataForm], dataForm => dataForm);\r\n\r\nconst getIsFormValid = state => {\r\n  return state.formData.isFormValid;\r\n};\r\n\r\nexport const getIsFormValidSelector = createSelector([getIsFormValid], isFormValid => isFormValid);\r\n\r\nconst getIsAccount = state => {\r\n  return state.formData.isAccount;\r\n};\r\n\r\nexport const getIsAccountSelector = createSelector([getIsAccount], getIsAccount => getIsAccount);","import React from 'react';\r\nimport classes from './FormRegistration.module.css';\r\nimport InputContainer from './input/InputContainer';\r\nimport classnames from 'classnames';\r\nimport { submitHandler } from '../../utils/submitHandler';\r\nimport useSelectors from '../../hooks/useSelector';\r\nimport {\r\n  getDataFormSelector,\r\n  getIsAccountSelector,\r\n  getIsFormValidSelector\r\n} from '../../models/selectors';\r\nimport useAction from '../../hooks/useAction';\r\nimport {\r\n  SET_IS_ACCOUNT_CREATED,\r\n  SET_IS_FORM_VALID\r\n} from '../../models/actions';\r\nimport { isValidFields } from '../../utils/isValidFields';\r\n\r\n\r\nconst FormRegistration = () => {\r\n  const dataForm = useSelectors(getDataFormSelector);\r\n  const isFormValid = useSelectors(getIsFormValidSelector);\r\n  const isFormValidCheck = useAction(SET_IS_FORM_VALID);\r\n  const isAccountCreated = useAction(SET_IS_ACCOUNT_CREATED);\r\n  const isAccount = useSelectors(getIsAccountSelector);\r\n  \r\n  \r\n  const setLocalStorate = () => {\r\n    if (isValidFields(dataForm, isFormValid)) {\r\n      for (let n in isFormValid) {\r\n        if (!dataForm[n]) {\r\n          isFormValidCheck({ text: `Заполните поле.`, fieldName: n })\r\n        }\r\n      }\r\n    } else {\r\n      localStorage.setItem('formData', JSON.stringify(dataForm));\r\n      isAccountCreated();\r\n    }\r\n  };\r\n  \r\n  const type = ['text', 'email', 'password', 'text', 'text', 'number'];\r\n  const InputContainers = Object.keys(dataForm).map((inp, index) =>\r\n    <InputContainer\r\n      key={index}\r\n      title={inp}\r\n      typeOfInput={type[index]}\r\n      values={dataForm[inp]}\r\n      isFormValidCheck={isFormValidCheck}\r\n      isFormValid={isFormValid[inp]}\r\n    />\r\n  );\r\n  \r\n  return (\r\n    <form onSubmit={submitHandler} className={classes.formRegistration}>\r\n      {InputContainers}\r\n      <div className={classes.item}>\r\n        <button\r\n          onClick={setLocalStorate}\r\n          className={classnames(\r\n            classes.submit,\r\n            isAccount && classes.complete\r\n          )}\r\n          disabled={isAccount}\r\n        >\r\n          {isAccount ? '✓' : 'Create my account'}\r\n        </button>\r\n      </div>\r\n    </form>\r\n  )\r\n};\r\n\r\nexport default FormRegistration;","export const isValidFields = (dataForm, isFormValid) => {\r\n  for (let key in dataForm) {\r\n    if (!dataForm[key] || isFormValid[key]) {\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n};","import React from 'react';\r\nimport classes from './CompletedForm.module.css';\r\n\r\nconst CompletedElement = ({ dataFormItem }) => (\r\n  <div className={classes.item}>\r\n    <span className={classes.naming}>{dataFormItem[0]}:</span>\r\n    <input readOnly className={classes.field} value={dataFormItem[1]}/>\r\n  </div>\r\n);\r\n\r\nexport default CompletedElement;","import React from 'react';\r\nimport classes from './CompletedForm.module.css';\r\nimport CompletedElement from './CompletedElement';\r\nimport useSelector from '../../hooks/useSelector';\r\nimport { getDataFormSelector } from '../../models/selectors';\r\n\r\nconst CompletedForm = () => {\r\n  const dataForm = useSelector(getDataFormSelector);\r\n  const inputs = Object.entries(dataForm).map((dataFormItem, index) =>\r\n    <CompletedElement\r\n      key={index}\r\n      dataFormItem={dataFormItem}\r\n    />);\r\n  \r\n  return (\r\n    <form className={classes.completedForm}>\r\n      {inputs}\r\n    </form>\r\n  )\r\n};\r\n\r\nexport default CompletedForm;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport store from './state/store';\nimport { Provider } from 'react-redux';\nimport FormRegistration from './components/formToFill/FormRegistration';\nimport CompletedForm from './components/completedForm/CompletedForm';\n\n\nconst App = () => (\n  <div className=\"App\">\n    <FormRegistration />\n    <CompletedForm />\n  </div>\n);\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>, document.getElementById('root'));\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"completedForm\":\"CompletedForm_completedForm__3Qan5\",\"item\":\"CompletedForm_item__3pOvJ\",\"naming\":\"CompletedForm_naming__2qNCu\",\"field\":\"CompletedForm_field__1-onz\"};"],"sourceRoot":""}