{"version":3,"sources":["components/FormRegistration/FormRegistration.module.css","components/CompletedForm/CompletedForm.module.css","utils/deepCopy.js","models/registrform/reducers.js","utils/getlocalStorage.js","models/registrform/actions.js","state/store.js","components/FormRegistration/input/Input.jsx","hooks/useAction.js","components/FormRegistration/input/InputContainer.jsx","utils/validators.js","hooks/useSelector.js","models/registrform/selectors.js","components/FormRegistration/FormRegistration.jsx","utils/isValidFields.js","components/CompletedForm/CompletedElement/CompletedElement.jsx","components/CompletedForm/CompletedForm.jsx","index.js","components/CompletedForm/CompletedElement/CompletedElement.module.css"],"names":["module","exports","original","JSON","parse","stringify","dataForms","dataForm","schema","Entity","dataNormalized","normalize","localStorage","getItem","id","name","type","title","isValid","errorText","values","initialState","entities","ids","result","isAccount","reducers","state","action","dataFormCopy","deepCopy","payload","reducer","combineReducers","formData","store","createStore","devToolsEnhancer","memo","typeOfInput","setValues","errorMessage","hFor","mask","className","classes","item","htmlFor","classnames","naming","invalid","field","value","onChange","useAction","dispatch","useDispatch","useCallback","InputContainer","formValidCheck","Math","random","setData","e","currentTarget","isFormValidCheck","length","test","isValidName","isValidEmail","isValidPassword","isValidDate","isValidPhone","isValidAge","func","params","useSelector","getDataFormSelector","createSelector","getDataFormIdSelector","getIsAccountSelector","getIsAccount","FormRegistration","useSelectors","dataFormIds","accountCreated","useEffect","setItem","InputContainers","map","key","onSubmit","preventDefault","every","isValidFields","forEach","trim","formRegistration","submit","complete","disabled","CompletedElement","dataFormItem","CompletedForm","inputs","completedForm","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d57b0f81.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formRegistration\":\"FormRegistration_formRegistration__1dtnf\",\"item\":\"FormRegistration_item__2QVpP\",\"naming\":\"FormRegistration_naming__3I7fh\",\"submit\":\"FormRegistration_submit__359ty\",\"field\":\"FormRegistration_field__1onDX\",\"errorMessage\":\"FormRegistration_errorMessage__4EXQM\",\"invalid\":\"FormRegistration_invalid__qipYu\",\"complete\":\"FormRegistration_complete__3bXfh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"completedForm\":\"CompletedForm_completedForm__3OxOs\"};","export default original => JSON.parse(JSON.stringify(original));\r\n","import { getStorage } from '../../utils/getlocalStorage';\r\nimport {\r\n  SET_DATAFORM_NAME,\r\n  SET_IS_ACCOUNT_CREATED,\r\n  SET_IS_FORM_VALID\r\n} from './actions';\r\nimport deepCopy from '../../utils/deepCopy';\r\nimport {\r\n  normalize,\r\n  schema\r\n} from 'normalizr';\r\n\r\n\r\nconst dataFormScheme = new schema.Entity('dataForm');\r\nconst dataForms = { dataForm: [dataFormScheme] };\r\nconst dataNormalized = normalize(getStorage(), dataForms);\r\n\r\nconst initialState = {\r\n  dataForm: {\r\n    entities: dataNormalized.entities.dataForm,\r\n    ids: dataNormalized.result.dataForm\r\n  },\r\n  isAccount: false\r\n};\r\n\r\nconst reducers = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    \r\n    case SET_DATAFORM_NAME: {\r\n      const dataFormCopy = deepCopy(state.dataForm);\r\n      const { id, values } = action.payload;\r\n      dataFormCopy.entities[id] = { ...state.dataForm.entities[id], values };\r\n      dataFormCopy.ids = [...state.dataForm.ids];\r\n      return {\r\n        ...state,\r\n        dataForm: dataFormCopy\r\n      };\r\n    }\r\n    \r\n    \r\n    case SET_IS_FORM_VALID: {\r\n      const dataFormCopy = deepCopy(state.dataForm);\r\n      const { id, errorText, isValid } = action.payload;\r\n      dataFormCopy.entities[id] = { ...state.dataForm.entities[id], errorText, isValid };\r\n      dataFormCopy.ids = [...state.dataForm.ids];\r\n      return {\r\n        ...state,\r\n        dataForm: dataFormCopy\r\n      };\r\n    }\r\n    \r\n    \r\n    case SET_IS_ACCOUNT_CREATED:\r\n      return { ...state, isAccount: true };\r\n    \r\n    \r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n\r\nexport default reducers;","export const getStorage = () => {\r\n  if (localStorage.getItem('formData')) {\r\n    return {dataForm: JSON.parse(localStorage.getItem('formData'))}\r\n  }\r\n  return {dataForm: [{\r\n    id: 1,\r\n    name: 'name',\r\n    type: 'text',\r\n    title: 'Name',\r\n    isValid: false,\r\n    errorText: '',\r\n    values: ''\r\n  },\r\n    {\r\n      id: 2,\r\n      name: 'email',\r\n      type: 'text',\r\n      title: 'Email',\r\n      isValid: false,\r\n      errorText: '',\r\n      values: ''\r\n    },\r\n    {\r\n      id: 3,\r\n      name: 'password',\r\n      type: 'password',\r\n      title: 'Password',\r\n      isValid: false,\r\n      errorText: '',\r\n      values: ''\r\n    },\r\n    {\r\n      id: 4,\r\n      name: 'dateOfBirth',\r\n      type: 'text',\r\n      title: 'Date of Birth',\r\n      isValid: false,\r\n      errorText: '',\r\n      values: ''\r\n    },\r\n    {\r\n      id: 5,\r\n      name: 'phoneNumber',\r\n      type: 'text',\r\n      title: 'Phone number',\r\n      isValid: false,\r\n      errorText: '',\r\n      values: ''\r\n    },\r\n    {\r\n      id: 6,\r\n      name: 'age',\r\n      type: 'number',\r\n      title: 'Age',\r\n      isValid: false,\r\n      errorText: '',\r\n      values: ''\r\n    }]}\r\n};","export const SET_DATAFORM_NAME = 'SET_DATAFORM_NAME';\r\nexport const SET_IS_FORM_VALID = 'SET_IS_FORM_VALID';\r\nexport const SET_IS_ACCOUNT_CREATED = 'SET_IS_ACCOUNT_CREATED';","import {\r\n  combineReducers,\r\n  createStore\r\n} from 'redux';\r\nimport reducers from '../models/registrform/reducers';\r\nimport { devToolsEnhancer } from 'redux-devtools-extension';\r\n\r\n\r\nconst reducer = combineReducers(\r\n  {\r\n    formData: reducers\r\n  }\r\n);\r\n\r\nconst store = createStore(reducer, /* preloadedState, */ devToolsEnhancer(\r\n  // Specify name here, actionsBlacklist, actionsCreators and other options if needed\r\n));\r\nexport default store;","import React, { memo }  from 'react';\r\nimport classes from '../FormRegistration.module.css';\r\nimport classnames from 'classnames';\r\nimport InputElement from 'react-input-mask';\r\n\r\n\r\nconst Input = ({\r\n  title,\r\n  typeOfInput,\r\n  values,\r\n  setValues,\r\n  errorMessage,\r\n  hFor,\r\n  mask\r\n}) => (\r\n  <div className={classes.item}>\r\n    <label\r\n      htmlFor={hFor}\r\n      className={classnames(\r\n        classes.naming,\r\n        errorMessage && classes.invalid\r\n      )}>\r\n      {title}\r\n    </label>\r\n    <InputElement\r\n      name={title}\r\n      id={hFor}\r\n      className={classes.field}\r\n      type={typeOfInput}\r\n      value={values}\r\n      onChange={setValues}\r\n      mask = {mask}\r\n    />\r\n    <span className={classes.errorMessage}>\r\n      {errorMessage}\r\n    </span>\r\n  </div>\r\n);\r\n\r\nexport default memo(Input);","import { useCallback } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nconst useAction = type => {\r\n  const dispatch = useDispatch();\r\n  return useCallback((payload = {}) => dispatch({type, payload}), [\r\n    dispatch,\r\n    type\r\n  ]);\r\n};\r\n\r\nexport default useAction;\r\n\r\n","import React, { useCallback } from 'react';\r\nimport Input from './Input';\r\nimport {\r\n  isValidAge,\r\n  isValidDate,\r\n  isValidEmail,\r\n  isValidName,\r\n  isValidPassword,\r\n  isValidPhone\r\n} from '../../../utils/validators';\r\nimport useAction from '../../../hooks/useAction';\r\nimport { SET_DATAFORM_NAME } from '../../../models/registrform/actions';\r\n\r\nconst InputContainer = ({\r\n  title,\r\n  typeOfInput,\r\n  values,\r\n  formValidCheck,\r\n  name,\r\n  id,\r\n  errorMessage\r\n}) => {\r\n  const hFor = `${title}-${Math.random()}`;\r\n  const setData = useAction(SET_DATAFORM_NAME);\r\n  \r\n  const setValues = useCallback((e) => {\r\n    const values = e.currentTarget.value;\r\n    setData({ id, values });\r\n    switch (e.currentTarget.name) {\r\n      case 'Name':\r\n        isValidName(values, formValidCheck, id);\r\n        break;\r\n      case 'Email':\r\n        isValidEmail(values, formValidCheck, id);\r\n        break;\r\n      case 'Password':\r\n        isValidPassword(values, formValidCheck, id);\r\n        break;\r\n      case 'Date of Birth':\r\n        isValidDate(values, formValidCheck, id);\r\n        break;\r\n      case 'Phone number':\r\n        isValidPhone(values, formValidCheck, id);\r\n        break;\r\n      case 'Age':\r\n        isValidAge(values, formValidCheck, id);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }, [setData, formValidCheck, id]);\r\n  \r\n  const masks = {\r\n    'dateOfBirth': \"99-99-9999\",\r\n    'phoneNumber': \"+7 (999) 999-99-99\"\r\n  };\r\n  return (\r\n    <Input\r\n      title={title}\r\n      typeOfInput={typeOfInput}\r\n      values={values}\r\n      setValues={setValues}\r\n      errorMessage={errorMessage}\r\n      hFor={hFor}\r\n      mask = {masks[name]}\r\n    />\r\n  );\r\n};\r\n\r\nexport default InputContainer;","export const isValidName = (values, isFormValidCheck, id) => {\r\n  if (!values.length) {\r\n    isFormValidCheck({ errorText: 'Имя не может быть пустым.', id, isValid: false});\r\n  } else {\r\n    (!/^[a-zA-Zа-яА-Я]+$/.test(values))\r\n      ? isFormValidCheck({ errorText: 'Имя может содержать только буквы.', id, isValid: false})\r\n      : isFormValidCheck({ errorText: '', id, isValid: true });\r\n  }\r\n};\r\n\r\nexport const isValidEmail = (values, isFormValidCheck, id) => {\r\n  if (!values.length) {\r\n    isFormValidCheck({ errorText: 'Email обязателен к заполнению.', id, isValid: false });\r\n  } else {\r\n    (!/^([A-Za-z0-9_\\-.])+@([A-Za-z0-9])+\\.([A-Za-z]{2,4})$/.test(values))\r\n      ? isFormValidCheck({ errorText: 'Некорректный Email.', id, isValid: false})\r\n      : isFormValidCheck({ errorText: '', id,isValid: true });\r\n  }\r\n};\r\n\r\nexport const isValidPassword = (values, isFormValidCheck, id) => {\r\n  (values.length < 6)\r\n    ? isFormValidCheck({ errorText: 'Пароль слишком короткий.', id, isValid: false })\r\n    : isFormValidCheck({ errorText: '', id, isValid: true });\r\n};\r\n\r\nexport const isValidDate = (values, isFormValidCheck, id) => {\r\n  (!/^\\d\\d-\\d\\d-[\\d]{4}$/.test(values))\r\n    ? isFormValidCheck({ errorText: 'Введите дату в формате ДД-ММ-ГГГГ.', id, isValid: false })\r\n    : isFormValidCheck({ errorText: '', id, isValid: true });\r\n};\r\n\r\nexport const isValidPhone = (values, isFormValidCheck, id) => {\r\n  ((!/(\\+7\\s\\([0-9]{3}\\)\\s[0-9]{3}-[0-9]{2}-[0-9]{2})/.test(values)))\r\n    ? isFormValidCheck({ errorText: 'Номер состоит из 10 цифр.', id, isValid: false })\r\n    : isFormValidCheck({ errorText: '', id, isValid: true });\r\n};\r\n\r\nexport const isValidAge = (values, isFormValidCheck, id) => {\r\n  (values < 18)\r\n    ? isFormValidCheck({ errorText: 'Регистрация с 18 лет.', id, isValid: false })\r\n    : isFormValidCheck({ errorText: '', id, isValid: true })\r\n};","import { useSelector } from 'react-redux';\r\n\r\nexport default (func, params = {}) => useSelector(state => func(state, params));\r\n","import { createSelector } from 'reselect';\r\n\r\nconst getDataForm = state => {\r\n  return state.formData.dataForm.entities;\r\n};\r\n\r\nexport const getDataFormSelector = createSelector([getDataForm], dataForm => dataForm);\r\n\r\nconst getDataFormId = state => {\r\n  return state.formData.dataForm.ids;\r\n};\r\n\r\nexport const getDataFormIdSelector = createSelector([getDataFormId], id => id);\r\n\r\n\r\nconst getIsAccount = state => {\r\n  return state.formData.isAccount;\r\n};\r\n\r\nexport const getIsAccountSelector = createSelector([getIsAccount], getIsAccount => getIsAccount);","import React, { useEffect } from 'react';\r\nimport classes from './FormRegistration.module.css';\r\nimport InputContainer from './input/InputContainer';\r\nimport classnames from 'classnames';\r\nimport useSelectors from '../../hooks/useSelector';\r\nimport {\r\n  getDataFormIdSelector,\r\n  getDataFormSelector,\r\n  getIsAccountSelector,\r\n} from '../../models/registrform/selectors';\r\nimport useAction from '../../hooks/useAction';\r\nimport {\r\n  SET_IS_ACCOUNT_CREATED,\r\n  SET_IS_FORM_VALID\r\n} from '../../models/registrform/actions';\r\nimport { isValidFields } from '../../utils/isValidFields';\r\n\r\n\r\nconst FormRegistration = () => {\r\n  const dataForm = useSelectors(getDataFormSelector);\r\n  const dataFormIds = useSelectors(getDataFormIdSelector);\r\n  const formValidCheck = useAction(SET_IS_FORM_VALID);\r\n  const accountCreated = useAction(SET_IS_ACCOUNT_CREATED);\r\n  const isAccount = useSelectors(getIsAccountSelector);\r\n  const submitHandler = (e) => {\r\n    e.preventDefault();\r\n    if (!isValidFields(dataForm, dataFormIds)) {\r\n      dataFormIds.forEach(id => {\r\n        if (!dataForm[id].isValid && !dataForm[id].values.trim()) {\r\n          formValidCheck({ errorText: 'Заполните поле', id, isValid: false })\r\n        }\r\n      });\r\n    } else {\r\n      localStorage.setItem('formData', JSON.stringify(dataForm));\r\n      accountCreated();\r\n    }\r\n  };\r\n  \r\n  \r\n  useEffect(() => {\r\n    localStorage.setItem('formData', JSON.stringify(dataForm));\r\n  }, [dataForm]);\r\n  \r\n  \r\n  const InputContainers = dataFormIds.map(id =>\r\n    <InputContainer\r\n      key={id}\r\n      title={dataForm[id].title}\r\n      typeOfInput={dataForm[id].type}\r\n      values={dataForm[id].values}\r\n      formValidCheck={formValidCheck}\r\n      name={dataForm[id].name}\r\n      id={id}\r\n      errorMessage={dataForm[id].errorText}\r\n    />\r\n  );\r\n  \r\n  return (\r\n    <form onSubmit={submitHandler} className={classes.formRegistration}>\r\n      {InputContainers}\r\n      <div className={classes.item}>\r\n        <button\r\n          className={classnames(\r\n            classes.submit,\r\n            isAccount && classes.complete\r\n          )}\r\n          disabled={isAccount}\r\n        >\r\n          {isAccount ? '✓' : 'Create my account'}\r\n        </button>\r\n      </div>\r\n    </form>\r\n  )\r\n};\r\n\r\nexport default FormRegistration;","export const isValidFields = (dataForm, ids) => {\r\n  return ids.every(field => dataForm[field].isValid)\r\n};","import React from 'react';\r\nimport classes from '../CompletedElement/CompletedElement.module.css';\r\n\r\nconst CompletedElement = ({ field, dataFormItem }) => (\r\n  <div className={classes.item}>\r\n    <span className={classes.naming}>{field}:</span>\r\n    <div className={classes.field}>{dataFormItem}</div>\r\n  </div>\r\n);\r\n\r\nexport default CompletedElement;","import React from 'react';\r\nimport classes from './CompletedForm.module.css';\r\nimport CompletedElement from './CompletedElement';\r\nimport useSelectors from '../../hooks/useSelector';\r\nimport {\r\n  getDataFormIdSelector,\r\n  getDataFormSelector\r\n} from '../../models/registrform/selectors';\r\n\r\nconst CompletedForm = () => {\r\n  const dataForm = useSelectors(getDataFormSelector);\r\n  const dataFormIds = useSelectors(getDataFormIdSelector);\r\n  const inputs = dataFormIds.map(id =>\r\n    <CompletedElement\r\n      key={id}\r\n      field = {dataForm[id].title}\r\n      dataFormItem={dataForm[id].values}\r\n    />);\r\n  \r\n  return (\r\n    <form className={classes.completedForm}>\r\n      {inputs}\r\n    </form>\r\n  )\r\n};\r\n\r\nexport default CompletedForm;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport store from './state/store';\nimport { Provider } from 'react-redux';\nimport FormRegistration from './components/FormRegistration';\nimport CompletedForm from './components/CompletedForm';\n\n\nconst App = () => (\n  <div className=\"App\">\n    <FormRegistration />\n    <CompletedForm />\n  </div>\n);\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>, document.getElementById('root'));\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CompletedElement_item__2-Yd_\",\"naming\":\"CompletedElement_naming__2yc6L\",\"field\":\"CompletedElement_field__ALyGI\"};"],"sourceRoot":""}