{"version":3,"sources":["Components/FormToFill/FormRegistration.module.css","Components/FormToFill/Input/Input.jsx","Components/FormToFill/Input/InputContainer.jsx","Utils/validators.js","Components/FormToFill/FormRegistration.jsx","Components/CompletedForm/CompletedElement.jsx","Components/CompletedForm/CompletedForm.jsx","State/Form-Reselect.js","State/Form-Reducer.js","Utils/getlocalStorage.js","App.js","State/Store.js","index.js","Components/CompletedForm/CompletedForm.module.css"],"names":["module","exports","React","memo","title","typeOfInput","values","setValue","errorMessage","hFor","className","classes","item","htmlFor","classNames","naming","invalid","name","id","field","type","value","onChange","maxLength","InputContainer","setData","isFormValidCheck","isFormValid","Math","random","setValues","useCallback","e","currentTarget","length","test","isValidName","isValidEmail","isValidPassword","isValidDate","isValidPhone","FormRegistration","dataForm","setDataFormName","isAccountCreated","isAccount","onSubmit","preventDefault","formRegistration","email","password","dateOfBirth","phone","onClick","localStorage","setItem","JSON","stringify","Object","keys","forEach","n","submit","complete","CompletedElement","i","index","Naming","readOnly","CompletedForm","inputs","map","key","completedForm","getDataForm","state","formData","getIsFormValid","getIsAccount","initialState","getItem","parse","formReducer","action","text","isValid","connect","props","reducer","combineReducers","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a3e55fd9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formRegistration\":\"FormRegistration_formRegistration__3Db97\",\"item\":\"FormRegistration_item__3pWOk\",\"naming\":\"FormRegistration_naming__lGP69\",\"submit\":\"FormRegistration_submit__25QBC\",\"field\":\"FormRegistration_field__3mwpj\",\"errorMessage\":\"FormRegistration_errorMessage__Z0ylW\",\"invalid\":\"FormRegistration_invalid__3h1at\",\"complete\":\"FormRegistration_complete__ZETju\"};","import React  from 'react';\r\nimport classes from '../FormRegistration.module.css';\r\nimport classNames from 'classnames';\r\n\r\nconst Input = ({\r\n  title,\r\n  typeOfInput,\r\n  values,\r\n  setValue,\r\n  errorMessage,\r\n  hFor\r\n}) => {\r\n  \r\n  return (\r\n    <div className={classes.item}>\r\n      <label\r\n        htmlFor={hFor}\r\n        className={classNames(classes.naming, errorMessage && classes.invalid)}>\r\n        {title}\r\n      </label>\r\n      <input\r\n        name={title}\r\n        id={hFor}\r\n        className={classes.field}\r\n        type={typeOfInput}\r\n        value={values}\r\n        onChange={setValue}\r\n        maxLength='40'\r\n      />\r\n      <span className={classes.errorMessage}>{errorMessage}</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(Input);","import React, {useState, useCallback, useEffect} from 'react';\r\nimport Input from './Input';\r\nimport {isValidDate, isValidEmail, isValidName, isValidPassword, isValidPhone} from '../../../Utils/validators';\r\n\r\nconst InputContainer = ({\r\n  title,\r\n  typeOfInput,\r\n  values,\r\n  setData,\r\n  isFormValidCheck,\r\n  isFormValid\r\n}) => {\r\n  \r\n  const hFor = `${title}-${Math.random()}`;\r\n  \r\n  \r\n  const setValues = useCallback((e) => {\r\n    let value = e.currentTarget.value;\r\n    setData(value, title);\r\n    switch (e.currentTarget.name) {\r\n      case 'name':\r\n        isValidName(value, isFormValidCheck, 'name');\r\n        break;\r\n      case 'email':\r\n        isValidEmail(value, isFormValidCheck, 'email');\r\n        break;\r\n      case 'password':\r\n        isValidPassword(value, isFormValidCheck, 'password');\r\n        break;\r\n      case 'Date of Birth':\r\n        isValidDate(value, isFormValidCheck, 'Date of Birth');\r\n        break;\r\n      case 'Phone number':\r\n        isValidPhone(value, isFormValidCheck, 'Phone number');\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }, [setData]);\r\n  \r\n\r\n  \r\n  return (\r\n    <Input\r\n      title={title}\r\n      typeOfInput={typeOfInput}\r\n      values={values}\r\n      setValue={setValues}\r\n      errorMessage={isFormValid}\r\n      hFor={hFor}\r\n    />\r\n  );\r\n};\r\n\r\nexport default InputContainer;","export const isValidName = (values, isFormValidCheck, title) => {\r\n  if (!values.length) {\r\n    isFormValidCheck('Имя не может быть пустым.',  title);\r\n  } else {\r\n    (!/^[a-zA-Zа-яА-Я]+$/.test(values))\r\n      ? isFormValidCheck('Имя может содержать только буквы.', title)\r\n      : isFormValidCheck('', title);\r\n  }\r\n};\r\n\r\nexport const isValidEmail = (values, isFormValidCheck, title) => {\r\n  if (!values.length) {\r\n    isFormValidCheck('Email обязателен к заполнению.', title);\r\n  } else {\r\n    (!/^([A-Za-z0-9_\\-\\.])+\\@([A-Za-z0-9])+\\.([A-Za-z]{2,4})$/.test(values))\r\n      ? isFormValidCheck('Некорректный Email.', title)\r\n      : isFormValidCheck('', title);\r\n  }\r\n};\r\n\r\nexport const isValidPassword = (values, isFormValidCheck, title) => {\r\n  (values.length < 6)\r\n    ? isFormValidCheck('Пароль слишком короткий.', title)\r\n    : isFormValidCheck('', title);\r\n};\r\n\r\nexport const isValidDate = (values, isFormValidCheck, title) => {\r\n  if (!values.length) {\r\n    isFormValidCheck('Дата обязательна.', title);\r\n  } else {\r\n    (!/^\\d\\d.\\d\\d.[\\d]{4}$/.test(values))\r\n      ? isFormValidCheck('Введите дату в формате ДД-ММ-ГГГГ.', title)\r\n      : isFormValidCheck('', title);\r\n  }\r\n};\r\n\r\nexport const isValidPhone = (values, isFormValidCheck, title) => {\r\n  ((!/(^\\+7[0-9]{10}$)|(^8[0-9]{10}$)/.test(values)))\r\n    ? isFormValidCheck('Номер телефона начинается с +7 или 8.', title)\r\n    : isFormValidCheck('', title);\r\n};","import React from 'react';\r\nimport classes from './FormRegistration.module.css';\r\nimport InputContainer from './Input/InputContainer';\r\nimport classNames from 'classnames';\r\n\r\n\r\nconst FormRegistration = ({\r\n  dataForm,\r\n  setDataFormName,\r\n  isFormValidCheck,\r\n  isFormValid,\r\n  isAccountCreated,\r\n  isAccount\r\n}) => {\r\n  \r\n  const submitHandler = e => {\r\n    e.preventDefault();\r\n  };\r\n  const setLocalStorate = () => {\r\n    if (!dataForm.name || !dataForm.email || !dataForm.password || !dataForm.dateOfBirth || !dataForm.phone) {\r\n      Object.keys(isFormValid[0]).forEach(n => {\r\n      if (!isFormValid[0][`${n}`] && !dataForm[`${n}`]) {\r\n          isFormValidCheck(`Заполните поле.`, `${n}`)\r\n        }\r\n      })\r\n    } else {\r\n      localStorage.setItem('formData', JSON.stringify(dataForm));\r\n      isAccountCreated();\r\n    }\r\n  };\r\n  \r\n  \r\n  return (\r\n    <form onSubmit={submitHandler} className={classes.formRegistration}>\r\n      <InputContainer\r\n        title='name'\r\n        typeOfInput=\"text\"\r\n        values={dataForm.name}\r\n        setData={setDataFormName}\r\n        isFormValidCheck={isFormValidCheck}\r\n        isFormValid={isFormValid[0].name}\r\n      />\r\n      <InputContainer\r\n        title='email'\r\n        typeOfInput=\"email\"\r\n        values={dataForm.email}\r\n        setData={setDataFormName}\r\n        isFormValidCheck={isFormValidCheck}\r\n        isFormValid={isFormValid[0].email}\r\n      />\r\n      <InputContainer\r\n        title='password'\r\n        typeOfInput=\"password\"\r\n        values={dataForm.password}\r\n        setData={setDataFormName}\r\n        isFormValidCheck={isFormValidCheck}\r\n        isFormValid={isFormValid[0].password}\r\n      />\r\n      <InputContainer\r\n        title='Date of Birth'\r\n        typeOfInput=\"text\"\r\n        values={dataForm.dateOfBirth}\r\n        setData={setDataFormName}\r\n        isFormValidCheck={isFormValidCheck}\r\n        isFormValid={isFormValid[0].dateOfBirth}\r\n      />\r\n      <InputContainer\r\n        title='Phone number'\r\n        typeOfInput=\"text\"\r\n        values={dataForm.phone}\r\n        setData={setDataFormName}\r\n        isFormValidCheck={isFormValidCheck}\r\n        isFormValid={isFormValid[0].phone}\r\n      />\r\n      <div className={classes.item}>\r\n        <button\r\n          onClick={setLocalStorate}\r\n          className={classNames(classes.submit, isAccount && classes.complete)}>\r\n          {isAccount ? '✓' : 'Create my account'}\r\n        </button>\r\n      </div>\r\n    </form>\r\n  )\r\n};\r\n\r\nexport default FormRegistration;","import React from 'react';\r\nimport classes from \"./CompletedForm.module.css\";\r\n\r\nconst CompletedElement = ({i, index, Naming}) => {\r\n  return (\r\n    <div  className={classes.item}>\r\n      <span className={classes.naming}>{Naming[index]}:</span>\r\n      <input readOnly className={classes.field} value={i}/>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CompletedElement;","import React from 'react';\r\nimport classes from './CompletedForm.module.css';\r\nimport CompletedElement from \"./CompletedElement\";\r\n\r\nconst CompletedForm = ({dataForm}) => {\r\n  const Naming = ['Name', 'Email', 'Password', 'Date of Birth', 'Phone number'];\r\n  let inputs = Object.values(dataForm).map((i, index) => {\r\n    return <CompletedElement key={index} i = {i} index = {index} Naming={Naming}/>\r\n  });\r\n  \r\n\treturn (\r\n\t\t<form className={classes.completedForm}>\r\n\t\t\t{inputs}\r\n\t\t</form>\r\n\t)\r\n};\r\n\r\nexport default CompletedForm;","export const getDataForm = state => {\r\n  return state.formData.dataForm;\r\n};\r\n\r\nexport const getIsFormValid = state => {\r\n  return state.formData.isFormValid;\r\n};\r\n\r\nexport const getIsAccount = state => {\r\n  return state.formData.isAccount;\r\n};","import {getStorage} from \"../Utils/getlocalStorage\";\r\n\r\nconst SET_DATAFORM_NAME = 'SET_DATAFORM_NAME';\r\nconst SET_IS_FORM_VALID = 'SET_IS_FORM_VALID';\r\nconst SET_IS_ACCOUNT_CREATED = 'SET_IS_ACCOUNT_CREATED';\r\n\r\nlet initialState = {\r\n  dataForm: getStorage(),\r\n  isFormValid: [{\r\n    'name': '',\r\n    'email': '',\r\n    'password': '',\r\n    'Date of Birth': '',\r\n    'Phone number': ''\r\n  }],\r\n  isAccount: false\r\n};\r\n\r\nconst formReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SET_DATAFORM_NAME:\r\n      return {\r\n        ...state, dataForm: state.dataForm.map(n => {\r\n          if ('name' === action.field) return {...n, name: action.text};\r\n          if ('email' === action.field) return {...n, email: action.text};\r\n          if ('password' === action.field)  return {...n, password: action.text};\r\n          if ('Date of Birth' === action.field) return {...n, dateOfBirth: action.text};\r\n          if ('Phone number' === action.field)  return {...n, phone: action.text};\r\n          else {return {...n}}\r\n        })\r\n      };\r\n    case SET_IS_FORM_VALID: {\r\n      return {\r\n        ...state, isFormValid: state.isFormValid.map(n => {\r\n          if ('name' === action.field) return {...n, name: action.isValid};\r\n          if ('email' === action.field) return {...n, email: action.isValid};\r\n          if ('password' === action.field)  return {...n, password: action.isValid};\r\n          if ('Date of Birth' === action.field) return {...n, dateOfBirth: action.isValid};\r\n          if ('Phone number' === action.field)  return {...n, phone: action.isValid};\r\n          else {return {...n}}\r\n        })\r\n      };\r\n    }\r\n    case SET_IS_ACCOUNT_CREATED:\r\n      return {...state, isAccount: true};\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const setDataFormName = (text, field) => ({type: SET_DATAFORM_NAME, text, field});\r\nexport const isFormValidCheck = (isValid, field) => ({type: SET_IS_FORM_VALID, isValid, field});\r\nexport const isAccountCreated = () => ({type: SET_IS_ACCOUNT_CREATED});\r\n\r\nexport default formReducer;","export const getStorage = () => {\r\n  if (localStorage.getItem('formData')) {\r\n    return [JSON.parse(localStorage.getItem('formData'))];\r\n  }\r\n  return [{\r\n    'name': '',\r\n    'email': '',\r\n    'password': '',\r\n    'Date of Birth': '',\r\n    'Phone number': ''\r\n  }];\r\n};","import React from 'react';\nimport './App.css';\nimport FormRegistration from './Components/FormToFill/FormRegistration';\nimport CompletedForm from './Components/CompletedForm/CompletedForm';\nimport {connect} from 'react-redux';\nimport {getDataForm, getIsAccount, getIsFormValid} from './State/Form-Reselect';\nimport {\n  isAccountCreated,\n  isFormValidCheck,\n  setDataFormName,\n} from './State/Form-Reducer';\n\nconst App = (props) => {\n  return (\n    <div className=\"App\">\n      <FormRegistration\n        dataForm={props.dataForm[0]}\n        setDataFormName={props.setDataFormName}\n        isFormValidCheck = {props.isFormValidCheck}\n        isFormValid = {props.isFormValid}\n        isAccountCreated = {props.isAccountCreated}\n        isAccount = {props.isAccount}\n      />\n      <CompletedForm dataForm={props.dataForm[0]}/>\n    </div>\n  );\n};\n\nconst mapStateToProps = state => {\n  return {\n    dataForm: getDataForm(state),\n    isFormValid: getIsFormValid(state),\n    isAccount: getIsAccount(state)\n  }\n};\n\nexport default connect(mapStateToProps, {\n  setDataFormName,\n  isFormValidCheck,\n  isAccountCreated\n})(App);\n","import { combineReducers, createStore } from \"redux\";\r\nimport formReducer from \"./Form-Reducer\";\r\n\r\nconst reducer = combineReducers(\r\n  {\r\n    formData: formReducer\r\n  }\r\n);\r\n\r\nconst store = createStore(reducer);\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from './State/Store';\n\nReactDOM.render(<App store = {store} />, document.getElementById('root'));\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"completedForm\":\"CompletedForm_completedForm__2cWC9\",\"item\":\"CompletedForm_item__3kKq5\",\"naming\":\"CompletedForm_naming__3vXQb\",\"field\":\"CompletedForm_field__1G2p9\"};"],"sourceRoot":""}